[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d CAPTracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-T13-4/main[image:https://travis-ci.org/CS2103-AY1819S1-T13-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "https://ci.appveyor.com/project/alexkmj/main/branch/master[image:https://ci.appveyor.com/api/projects/status/1sxo4mvlcd5oia7h?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T13-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T13-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/28acc5b7c04044519964e6253aeb58fa[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/alexkmj/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-T13-4/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* CAPTracker is for those students who prefer to use a desktop app for calculating and managing their CAP. More importantly CAPTracker is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CAPTracker is the ideal application to calculate your current CAP, and predict what grades you need in modules you havenâ€™t taken to achieve your target CAP."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Some parts of this application were inspired by https://github.com/nus-cs2103-AY1819S1/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Some parts of this application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 8,
      "-": 25
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"alexkmj\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"ALE...KOH\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"alex\", \"alexkmj\", \"Alex Koh\", \"alex koh\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"josephambe\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"JOSEP...R KIM\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"josephambe\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"jeremiah-ang\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"JEREM...NG EN\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"jeremiah-ang\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"jeremyyew\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"JEREM...W ERN\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"jeremyyew\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"githubId\": \"BugEyedBug\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"displayName\": \"KONG ...N YIN\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "      \"authorNames\": [\"BugEyedBug\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    archiveName \u003d \u0027captracker.jar\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        \u0027site-name\u0027: \u0027CAPTracker\u0027,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T13-4/main\u0027"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 3,
      "-": 242
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CAPTracker is for those students who prefer to use a desktop app for calculating and managing their CAP. More importantly CAPTracker is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CAPTracker is the ideal application to calculate your current CAP, and predict what grades you need in modules you havenâ€™t taken to achieve your ideal CAP. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Alex Koh"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::alexkmj.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty} [https://github.com/alexkmj[github]] [\u003c\u003calexkmj#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Amber Joseph"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::josephambe.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/josephambe[github]] [\u003c\u003cjosephambe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Jeremy Yew"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::jeremyyew.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/jeremyyew[github]] [\u003c\u003cjeremyyew#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Jeremiah Ang"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::jeremiah-ang.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/jeremiah-ang[github]] [\u003c\u003cjeremiah-ang#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Kong Jun Yin"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "image::bugeyedbug.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "{empty}[http://github.com/BugEyedBug[github]] [\u003c\u003cbugeyedbug#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Responsibilities: [Refer to W6.10]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 23,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103-AY1819S1-T13-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 1,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d CAPTracker - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "By: `T13-4` Â Â Â Â  Since: `Aug 2018` Â Â Â Â  Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ". *JDK `10`* or later"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)to add  manually"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Target User Profile"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "- An NUS Student who has a need to keep track of current CAP, calculate expected CAP, and grades required to achieve desired CAP."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Prefer desktop apps over other types."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Can type fast."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Prefers typing over mouse input."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "- Is reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Value Proposition"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Helps students manage their CAP and predict what grades they need to reach their CAP goal."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*Must-Have*"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "1.  As a user, I can add all the modules I have taken (module code,"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*module title*, MCs, grade, semester taken) so that I can calculate"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "average mark I need to graduate with desired CAP."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "2.  As a user I can delete modules so if I change my mind or fail a"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "module I can re-calculate my average."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "3.  As a user I can delete modules so that if i entered a wrong module"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "or failed it, I can remove it."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "4.  As a user I can edit the marks Iâ€™ve entered previously so that I can"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "update my CAP."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "5.  As a user, I can enter a CAP goal so that I can keep track of the"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "progress of my course"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "6.  As a user, I can calculate the average mark I need across the"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "modules Iâ€™ve entered so I can see what mark I need for each module to"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "achieve my CAP goal. +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "7.  As a user, I can enter in predicted grades for modules so I can see"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "what CAP I would get if I got these grades in my modules."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "8.  As a user, I can close the app and return to modify my entries so I"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "can enter my entries incrementally."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*Nice-To-Have*"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "1. As a user, I can add a module without having to add the code, MCs, or semester taken so that I can quickly calculate CAP without worrying about the modules."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "2. As a user, I can still enter the same modules but get warned first so that I would not mistakenly enter the same module again"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "3. As a user, I can import all modules for this semester with NUSMods link so that my data can be consistent with NUSMods."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "4. As a user I can search for a module via keyword or module title, and select it for entering my grade so that I donâ€™t have to remember the module code."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "5. As a user, I can adjust what marks I need for each module to achieve my CAP so I can put more emphasis on certain modules instead of expecting the same grade across all modules."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "6. As a user, I can view my current semesterâ€™s module goals and use a GUI to adjust projected grade for each module, and other modules will automatically adjust to compensate, so that I can see easily modify my data to see what grades I need for other modules."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "7. As a user, I can view total current MCs so that i can check if I meet the number of mc I need to graduate"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "8. As a user I can see if my CAP Goal is possible so I can check whether it is achievable."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "9. As a user, I can list modules taken by level as an alternative listing mode, so that it is easier to track graduation requirements."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "10. As a user, I can see what the highest possible CAP I can achieve with my current grades is so that I can set an appropriate goal."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "11. As a user, I can see what the minimum grades I need per module is to pass the year with my current grades so that I can see what the minimum about of work I need to do is."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "*Not-Useful*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "1. As a user, I can view the module descriptions so that I know what modules I should take"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "2. As a user I can enter the MCs for exchange I can keep track of modules that may not be mapped to our database of modules codes or isnâ€™t the default number of MCs."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "3. As a user, I can export my timetable so that I can share it with my friend."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Use case: Calculate predicted CAP"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User enters all modules - modules with grades (previous or target), modules without grades (unknown)."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . System immediately displays confirmation and current CAP."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Use case:  View grades needed to achieve CAP goal (based on previous grades)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . Use-Case-B.1."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User enters CAP goal."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User requests for target grade."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  .. **V1.0:**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... System displays target grades for each module (numeric)."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  .. **V2.0:**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... System displays target grades for each module (numeric and letter)."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... User edits target grades."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  ... System displays new target grades for each module."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Use case:  Save entered module"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User enters some modules"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . System saves the modules"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User restarts the application"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . User list entered modules"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "  . System displays saved modules"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ". Should work on any [mainstream OS](https://github.com/nus-cs2103-AY1819S1/addressbook-level4/blob/master/docs/DeveloperGuide.adoc#mainstream-os) as long as it has Java 10 or higher installed."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ". Should be able to hold up to 100 modules without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ". A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ". Should calculate prediction/expected CAP in 1 seconds"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 11,
      "alexkmj": 10,
      "-": 618,
      "jeremiah-ang": 58
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d CAPTracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-T13-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "By: `T13-4`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CAPTracker is for those students who prefer to use a desktop app for calculating and managing their CAP. More importantly CAPTracker is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CAPTracker is the ideal application to calculate your current CAP, and predict what grades you need in modules you havenâ€™t taken to achieve your ideal CAP. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ".  Ensure you have Java version `10` or later installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ".  Download the latest `captracker.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your CAP Tracker."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *`list`* : lists all modules"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* **`add`**`CS2103 1 2 A+` : adds a module `CS2103` to the CAP Tracker."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* **`delete`**`CS2103` : deletes a the module `CS2103` from CAP Tracker"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add MODULE_CODE YEAR SEMESTER [GRADE]` is a parameter which can be used as add CS2103 1 2 A+."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Items in square brackets are optional e.g `add MODULE_CODE YEAR SEMESTER [GRADE]` can be used as `add CS2103 1 2 A+` or as `add CS2103 1 2`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Adding a module: `add`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Adds a module to the cap tracker +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Format: `add MODULE_CODE YEAR SEMESTER [GRADE]`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "A module with grade provided means it has already been completed while a module without grade means it hasn\u0027t been taken by the user."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `add CS2103 1 2 A+`"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `add CS2103 1 2`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Listing all modules : `list`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Shows a list of all modules in the cap tracker. +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Editing a module : `edit`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Edits an existing module in the cap tracker. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Format: `edit MODULE_CODE [MODULE_CODE] [YEAR GRADE] [GRADE]`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Edits the module with the specified `MODULE_CODE`. The module must exist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `edit CS2103 CS1231 2 1` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Edits the module code and year and semester of `CS2103` module to be `CS1231` and `2 1` respectively."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `edit CS2103 2 1 CS` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Edits the year and semester of `CS2103` module to be `2 1` and grade to `CS`."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d\u003d Deleting a module : `delete`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Deletes the specified module from the cap tracker. +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Format: `delete MODULE_CODE`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* Deletes the module with the specified module code."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* `delete CS2103` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Deletes the module CS2103 in the cap tracker."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d\u003d Computing CAP : `goal`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Set the CAP goal you want to achieve. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Format: `goal CAP_GOAL`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* Set and Update the CAP goal."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* `goal 4.5` +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "Update your CAP goal to be 4.5"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "Clears all entries from the cap tracker. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CAP tracker data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "*Q*: I entered the wrong grade into my module. How do I change it? +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "*A*: Use the `edit` command to input the correct information of the module - `edit MODULE_CODE [MODULE_CODE] [YEAR SEMESTER] [GRADE]`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Add* `add MODULE_CODE YEAR SEMESTER [GRADE]` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "e.g. `add CS2103 1 2 A+`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Delete* : `delete MODULE_CODE` +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "e.g. `delete CS2103`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "* *Edit* : `edit MODULE_CODE [MODULE_CODE] [YEAR GRADE] [GRADE]` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "e.g. `edit CS2103 2 1 CS`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 44,
      "-": 100,
      "jeremiah-ang": 6
    }
  },
  {
    "path": "docs/team/alexkmj.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d Alex Koh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 30,
      "jeremiah-ang": 27
    }
  },
  {
    "path": "docs/team/bugeyedbug.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d Kong Jun Yin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BugEyedBug"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "BugEyedBug": 57
    }
  },
  {
    "path": "docs/team/jeremiah-ang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d Jeremiah Ang - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* v1.1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "** Implement CAP calculation logic"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "** Handle input/update of CAP Goal"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "* v1.2"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "** Implement logic to calculate target grades for _not-yet-graded_ modules"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "TBC"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 67
    }
  },
  {
    "path": "docs/team/jeremyyew.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d Jeremy Yew - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 58
    }
  },
  {
    "path": "docs/team/josephambe.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d Amber Joseph - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "josephambe"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "josephambe"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "josephambe"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d PROJECT: CAPTracker"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "josephambe"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "josephambe"
        },
        "content": "CapTracker is a desktop application. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Major enhancement*: TBC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** What it does: TBC."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Justification: TBC."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Highlights: TBC."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Credits: TBC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Minor enhancement*: TBC."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Community:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** PRs reviewed (with non-trivial review comments): TBC."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** Contributed to forum discussions (examples:  TBC.)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//*** Reported bugs and suggestions for other teams in the class (examples:  TBC.)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//** Tools:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "josephambe"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "josephambe"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "josephambe"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "josephambe"
        },
        "content": "//include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      }
    ],
    "authorContributionMap": {
      "josephambe": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.storage.JsonTranscriptStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.storage.TranscriptStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        TranscriptStorage transcriptStorage \u003d new JsonTranscriptStorage(userPrefs.getTranscriptFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, transcriptStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Optional\u003cReadOnlyTranscript\u003e transcriptOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //ReadOnlyTranscript initialTranscriptData;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // Not used for now. But wrote down already so I will leave it here for when we do complete morph."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            transcriptOptional \u003d storage.readTranscript();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            if (!transcriptOptional.isPresent()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //                logger.info(\"Data file not found. Will be starting with a sample transcript\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            initialTranscriptData \u003d transcriptOptional.orElseGet(SampleDataUtil::getSampleTranscript);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            logger.warning(\"Data file not in the correct format. Will be starting with an empty Transcript\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            initialTranscriptData \u003d new Transcript();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            logger.warning(\"Problem while reading from the file. Will be starting with an empty Transcript\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //            initialTranscriptData \u003d new Transcript();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //       }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 20,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/TranscriptChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/** Indicates the Transcript in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TranscriptChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final ReadOnlyTranscript data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public TranscriptChangedEvent(ReadOnlyTranscript data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return \"number of transcripts \" + data.getModuleList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddModuleCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Adds a module to the transcript."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to the transcript. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Parameters: CODE YEAR SEMESTER CREDIT [GRADE]\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103 2 1 4 A+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module added: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"This module already exists in the transcript\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Module toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        model.commitTranscript();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Shows CAP based on existing modules."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculate current CAP with given modules \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Parameters: NONE \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your Current CAP is: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d model.getCap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, cap));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GoalCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Sets CAP Goal"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goal\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set your CAP goal. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"CAP_GOAL \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            + \"4.5\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your CAP Goal: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private final double goal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Creates an GoalCommand to set the CAP Goal"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public GoalCommand(double goal) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this.goal \u003d goal;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        model.updateCapGoal(goal);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double capGoal \u003d model.getCapGoal();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, capGoal));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                || (other instanceof GoalCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                \u0026\u0026 goal \u003d\u003d ((GoalCommand) other).goal); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.CapCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return new CapCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        case GoalCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return new GoalCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 92,
      "jeremiah-ang": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GoalCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Parse User Input"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommandParser implements Parser\u003cGoalCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public GoalCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        final String trimmedArgs \u003d userInput.trim();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        final String format \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new ParseException(format);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            double newGoal \u003d Double.parseDouble(trimmedArgs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            if (newGoal \u003c 0 || newGoal \u003e 5) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "                throw new ParseException(format);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            return new GoalCommand(newGoal);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new ParseException(format);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** {@code Predicate} that always evaluate to true TODO: REMOVE*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code Predicate} that always evaluate to true."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Clears existing backing model and replaces with the newly provided data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param replacement the replacement."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void resetData(ReadOnlyTranscript replacement);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. TODO: REMOVE*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the Transcript."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return read only version of the transcript"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ReadOnlyTranscript getTranscript();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the transcript."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module module to find in the transcript"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module exists in transcript"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module must exist in the transcript."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target module to be deleted from the transcript"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code module} must not already exist in the transcript."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param module module to be added into the transcript"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the transcript. The module identity of {@code editedModule}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * must not be the same as another existing module in the transcript."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target module to be updated"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param editedModule the updated version of the module"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the filtered module list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has previous transcript states to restore."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canUndoTranscript();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the model has undone transcript states to restore."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    boolean canRedoTranscript();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s transcript to its previous state."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void undoTranscript();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the model\u0027s transcript to its previously undone state."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void redoTranscript();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves the current transcript state for undo/redo."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    void commitTranscript();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Get the cap goal of the current transcript"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    double getCapGoal();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Set the cap goal of the current transcript"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    void updateCapGoal(double capGoal);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the CAP based on the current Transcript records"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    double getCap();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns the AddressBook TODO: REMOVE*/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list TODO: REMOVE */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 115,
      "-": 73,
      "jeremiah-ang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final VersionedTranscript versionedTranscript;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Initializes a ModelManager with the given transcript and userPrefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager(ReadOnlyTranscript transcript, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(transcript, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        logger.fine(\"Initializing with transcript: \" + transcript + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript \u003d new VersionedTranscript(transcript);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedTranscript.getModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        //TODO: REMOVE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this(new Transcript(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript \u003d new VersionedTranscript(new Transcript());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(versionedTranscript.getModuleList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.resetData(newData);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void indicateTranscriptChanged() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        raise(new TranscriptChangedEvent(versionedTranscript));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.hasModule(module);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.removeModule(target);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.addModule(module);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.updateModule(target, editedModule);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code versionedTranscript}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredModules);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.canUndo();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return versionedTranscript.canRedo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undoTranscript() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.undo();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redoTranscript() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.redo();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commitTranscript() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        versionedTranscript.commit();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCapGoal() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedTranscript.getCapGoal();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        versionedTranscript.setCapGoal(capGoal);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        indicateTranscriptChanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * TODO: REMOVE"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return versionedTranscript.getCap();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons) // TODO: REMOVE"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 134,
      "-": 146,
      "jeremiah-ang": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTranscript.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.storage.JsonTranscriptDeserializer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Unmodifiable view of a Transcript."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "@JsonDeserialize(using \u003d JsonTranscriptDeserializer.class)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public interface ReadOnlyTranscript {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns an unmodifiable view of the module list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 17,
      "alexkmj": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Transcript.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Wraps all data at the transcript level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Duplicates are not allowed (by .isSameModule comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Transcript implements ReadOnlyTranscript {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final UniqueModuleList modules;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private double capGoal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Transcript() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an Transcript using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Transcript(ReadOnlyTranscript toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the contents of the module list with {@code modules}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.modules.setModules(modules);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Resets the existing data of this {@code Transcript} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// module-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the transcript."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.contains(module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds a module to the transcript."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module must not already exist in the transcript."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addModule(Module p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the transcript."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the transcript."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(editedModule);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.setModule(target, editedModule);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes {@code key} from this {@code Transcript}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code key} must exist in the transcript."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        modules.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Return the current CAP"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return current cap score"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return calculateCap();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Calculate CAP Score based on modules with scores"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return cap: cap score"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private double calculateCap() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        ObservableList\u003cModule\u003e gradedModulesList \u003d getGradedModulesList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double totalCap \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double point;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        int totalModuleCredit \u003d 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        int moduleCredit;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        for (Module module : gradedModulesList) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            moduleCredit \u003d module.getCredits().value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            point \u003d module.getGrade().getPoint();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            totalCap +\u003d moduleCredit * point;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            totalModuleCredit +\u003d moduleCredit;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        if (totalModuleCredit \u003e 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            cap \u003d totalCap / totalModuleCredit;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Filters for modules that is to be used for CAP calculation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return list of modules used for CAP calculation"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private ObservableList\u003cModule\u003e getGradedModulesList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return modules.getFilteredModules(this::moduleIsUsedForCapCalculation);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Check if the given module should be considered for CAP Calculation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if yes, false otherwise"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private boolean moduleIsUsedForCapCalculation(Module module) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return module.hasCompleted() \u0026\u0026 moduleAffectsGrade(module);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Check if a module affects grade"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return true if module affects grade, false otheriwse"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private boolean moduleAffectsGrade(Module module) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return module.getGrade().affectsCap();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public double getCapGoal() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return capGoal;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //TODO: Create another class capGoal (similarly to the Module parameters)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    // that checks for valid input, and also has \u0027NIL\u0027 value."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void setCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        this.capGoal \u003d capGoal;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.asUnmodifiableObservableList().size() + \" modules\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Transcript // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 modules.equals(((Transcript) other).modules));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.hashCode();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 3,
      "alexkmj": 120,
      "jeremiah-ang": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    //TODO: REMOVE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.xml\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Path transcriptFilePath \u003d Paths.get(\"data\", \"transcript.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return transcriptFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setTranscriptFilePath(Path transcriptFilePath) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.transcriptFilePath \u003d transcriptFilePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: REMOVE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: REMOVE"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath) //TODO: REMOVE"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 Objects.equals(transcriptFilePath, o.transcriptFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Objects.hash(guiSettings, transcriptFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + transcriptFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 15,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedTranscript.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * {@code Transcript} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class VersionedTranscript extends Transcript {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final List\u003cReadOnlyTranscript\u003e transcriptStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public VersionedTranscript(ReadOnlyTranscript initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.add(new Transcript(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Saves a copy of the current {@code Transcript} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.add(new Transcript(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        transcriptStateList.subList(currentStatePointer + 1, transcriptStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the transcript to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(transcriptStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Restores the transcript to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        resetData(transcriptStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code undo()} has transcript states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code redo()} has transcript states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return currentStatePointer \u003c transcriptStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(other instanceof VersionedTranscript)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        VersionedTranscript otherVersionedTranscript \u003d (VersionedTranscript) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return super.equals(otherVersionedTranscript)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 transcriptStateList.equals(otherVersionedTranscript.transcriptStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedTranscript.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            super(\"Current state pointer at start of transcriptState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            super(\"Current state pointer at end of transcriptState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Code.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s code in the transcript."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCode(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Code {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for code value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_CODE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Code can take any values except whitespaces\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String CODE_VALIDATION_REGEX \u003d \"^[^\\\\s]+$\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable code value."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param code A valid code."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Code(String code) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidCode(code), MESSAGE_CODE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d code;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid code."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param code string to be tested for validity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidCode(String code) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return code.matches(CODE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module code."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module code"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the module code value of both Code object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two code objects."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Code object compared against this object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Code) other).value));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Credit.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s credits in the transcript."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCredit(int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Credit {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for credit value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_CREDIT_CONSTRAINTS \u003d \"Credits must be a integer\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable credit value."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Credit}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param credits A valid credit."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Credit(int credits) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(credits);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidCredit(credits), MESSAGE_CREDIT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d credits;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid credit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Credit must be between 1 and 20"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param credits string to be tested for validity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid credit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidCredit(int credits) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (credits \u003c 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        } else if (credits \u003e 20) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module credits value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module credits"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the module credit value of both Credit object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two credit objects."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Credit object compared against this object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Credit"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Credit) other).value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Grade.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s grade in the transcript."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGrade(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for grade value."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_GRADE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Grade can be A+, A, A-, B+, B, B-, C+, C, D+, D, F, CS, CU\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String GRADE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"A\\\\+|A\\\\-|A|B\\\\+|B\\\\-|B|C\\\\+|C|D\\\\+|D|F|CS|CU\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable grade value."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Grade}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade A valid grade."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade(String grade) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidGrade(grade), MESSAGE_GRADE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d grade;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid grade."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param grade string to be tested for validity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid grade"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidGrade(String grade) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return grade.matches(GRADE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if grade affects cap and false if grade does not affect cap."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if grade affects cap and false if grade does not affect cap."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean affectsCap() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return !value.contentEquals(\"CS\") \u0026\u0026 !value.contentEquals(\"CU\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the point equivalent of the grade or 0 if grade is invalid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return point equivalent of the grade"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public float getPoint() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"A+\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 5f;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"A\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 5f;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"A-\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 4.5f;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"B+\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 4f;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"B\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 3.5f;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"B-\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 3f;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"C+\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 2.5f;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"C\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 2f;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"D+\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 1.5f;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 1f;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        case \"F\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return 0f;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the grade value."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return grade"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the grade value of both Grade object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two grade objects."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Grade object compared against this object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Grade"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Grade) other).value));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Module.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module in the transcript."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for completed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean MODULE_COMPLETED \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for not completed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final boolean MODULE_NOT_COMPLETED \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Code for the module."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Code code;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Year the module was taken."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Semester the module was taken."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Semester semester;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Module credits awarded for completion this module."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Credit credits;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Module grade awarded for completion this module."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final Grade grade;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * True if module has been completed. False if module has not been taken yet."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final boolean completed;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Module(Code code, Year year, Semester semester, Credit credit, Grade grade,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            boolean completed) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(credit);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.semester \u003d semester;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.credits \u003d credit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module code."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module code"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Code getCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module credits awarded."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module credits"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Credit getCredits() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return credits;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the year in which the module was taken."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return year in which module was taken"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year getYear() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the semester in which the module was taken."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return semester in which module was taken"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Semester getSemester() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return semester;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the module grade awarded."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return module grade"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Grade getGrade() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if module has been completed and false if module has not been taken."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if module has been completed and false if module has not been taken"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean hasCompleted() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return completed;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if module code is the same."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if modue code is the same"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return otherModule !\u003d null \u0026\u0026 otherModule.getCode().equals(getCode());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if both modules are of the same object or contains the same set of data fields."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two modules."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other other module to be compared with this Module object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both objects contains the same data fields"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return otherModule.getCode().equals(getCode())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                \u0026\u0026 otherModule.getYear().equals(getYear())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                \u0026\u0026 otherModule.getSemester().equals(getSemester())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                \u0026\u0026 otherModule.getCredits().equals(getCredits())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                \u0026\u0026 otherModule.getGrade().equals(getGrade())"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 otherModule.hasCompleted() \u003d\u003d hasCompleted();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the code, year, semester, credits, grade, is module completed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Format: Code: CODE Year: YEAR Semester: SEMESTER Credits: CREDITS Grade: GRADE Completed:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * COMPLETED"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return information of this module"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return builder.append(\"Code: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getCode())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Year: \")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getYear())"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Semester: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getSemester())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Credits: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getCredits())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Grade: \")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(getGrade())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(\" Completed: \")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .append(hasCompleted())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .toString();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Objects.hash(code, year, semester, credits, grade, completed);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 4,
      "alexkmj": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Semester.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s semester in the transcript."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSemester(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Legal values: 1, 2, s1, s2. 1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * (Semester 1), 2 (Semester 2), s1 (Special Semester 1), s2 (Special Semester 2)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Semester {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Describes the requirements for semester value."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_SEMESTER_CONSTRAINTS \u003d \"Semester can be 1, 2, s1 or s2\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_VALIDATION_REGEX \u003d \"1|2|s1|s2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for semester one."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for semester two."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_TWO \u003d \"2\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for special semester one."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_SPECIAL_ONE \u003d \"s1\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constant for special semester two."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String SEMESTER_SPECIAL_TWO \u003d \"s2\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable semester value."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Code}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param semester A valid semester."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Semester(String semester) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(semester);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidSemester(semester), MESSAGE_SEMESTER_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d semester;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid semester."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param semester string to be tested for validity"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid semester"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidSemester(String semester) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return semester.matches(SEMESTER_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the semester value."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return grade"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the semester value of both Semester object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two semester objects."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Semester object compared against this object"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Semester"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value.equals(((Semester) other).value));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/UniqueModuleList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A module is considered unique by comparing {@code moduleA.equals(moduleB)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * As such, adding and updating of modules uses {@code moduleA.equals(moduleB)} for equality so as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * to ensure that the module being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * UniqueModuleList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Creates an observable list of module."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * See {@link Module}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if the list contains an equivalent module as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * See {@link Module}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toCheck the module that is being checked against"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if list contains equivalent module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameModule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Adds a module to the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The {@link Module} must not have already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toAdd the module that would be added into the list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * {@code target} must exist in the list. The {@link Module} identity of {@code editedModule}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * must not be the same as another existing module in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param target the module to be replaced"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param editedModule the modue that replaces the old module"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the {@link #internalList} of this UniqueModuleList with the internalList of the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * replacement."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param replacement the UniqueModuleList object that contains the internalList that is"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * replacing the old internalList"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Replaces the contents of this list with {@code modules}. {@code modules} must not contain"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * duplicate modules."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules the list of module that would replace the old list"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Removes the equivalent module from the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * The {@link Module} must exist in the list."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param toRemove the module to be removed from the list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return backing list as an unmodifiable {@code ObservableList}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param modules the module list that is being checked"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if modules are unique and false if modules are not unique"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return modules.size() \u003d\u003d modules.parallelStream()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .distinct()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Returns the list of filtered Module based on the given predicate"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param predicate"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return filtered list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModules(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return internalList.filtered(predicate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the iterator of the internal list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return iterator of the internal list"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the internal list of both UniqueModuleList object."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two UniqueModuleList objects."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Code object compared against this object"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 174,
      "jeremiah-ang": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Represents a Module\u0027s year in the transcript."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYear(int)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            \"Year must be [1-5]. Example: 1 represents Year 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * No whitespace allowed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Immutable year value."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public final int value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Year}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year(int year) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Constructs an {@code Year}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        value \u003d Integer.valueOf(year);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year string to be tested for validity"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid year"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidYear(int year) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return isValidYear(Integer.toString(year));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param year string to be tested for validity"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if given string is a valid year"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static boolean isValidYear(String year) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return year.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Returns the year the module was taken."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return year"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return Integer.toString(value);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Compares the year value of both Year object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * This defines a notion of equality between two Year objects."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @param other Year object compared against this object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * @return true if both are the same object or contains the same value"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                || (other instanceof Year"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                \u0026\u0026 value \u003d\u003d ((Year) other).value);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return toString().hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/DuplicateModuleException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Signals that the operation will result in duplicate {@link Module} objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        super(\"Operation would result in duplicate modules\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/module/exceptions/ModuleNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * Signals that the operation is unable to find the specified {@link Module}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/ModuleBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Credit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final String DEFAULT_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final int DEFAULT_YEAR \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final String DEFAULT_SEMESTER \u003d Semester.SEMESTER_ONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final int DEFAULT_CREDIT \u003d 4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final String DEFAULT_GRADE \u003d \"A+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final boolean DEFAULT_COMPLETED \u003d true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Code code;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Year year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Semester semester;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Credit credit;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Grade grade;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private boolean completed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        code \u003d new Code(DEFAULT_CODE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        year \u003d new Year(DEFAULT_YEAR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        semester \u003d new Semester(DEFAULT_SEMESTER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        credit \u003d new Credit(DEFAULT_CREDIT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        grade \u003d new Grade(DEFAULT_GRADE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        completed \u003d DEFAULT_COMPLETED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Initializes the ModuleBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        code \u003d moduleToCopy.getCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        year \u003d moduleToCopy.getYear();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        semester \u003d moduleToCopy.getSemester();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        credit \u003d moduleToCopy.getCredits();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        grade \u003d moduleToCopy.getGrade();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        completed \u003d moduleToCopy.hasCompleted();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets the {@code Code} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.code \u003d new Code(code);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets the {@code Year} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder withYear(int year) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.year \u003d new Year(year);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets the {@code Semester} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder withSemester(String semester) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.semester \u003d new Semester(semester);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets the {@code Credit} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder withCredit(int credit) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.credit \u003d new Credit(credit);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets the {@code Grade} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder withGrade(String grade) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.grade \u003d new Grade(grade);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets the {@code completed} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ModuleBuilder withCompleted(boolean completed) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.completed \u003d completed;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return new Module(code, year, semester, credit, grade, completed);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(2)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"B+\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(3)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"F\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module ASKING_QUESTIONS \u003d new ModuleBuilder().withCode(\"GEQ1000\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(1)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"CS\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Double MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP \u003d 3.0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(3)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(2)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(4)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102B\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withYear(2)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withCredit(2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .withGrade(\"A+\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                new Address(\"Blk 30 GePersonylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns an {@code Transcript} given modules as arguments."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static ReadOnlyTranscript getTranscriptWithModules(Module... modules) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static ReadOnlyTranscript getSampleTranscript() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return getTranscriptWithModules("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DISCRETE_MATH,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DATA_STRUCTURES,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            ASKING_QUESTIONS,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            SOFTWARE_ENGINEERING,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DATABASE_SYSTEMS,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            DATABASE_SYSTEMS_2MC);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 79,
      "alexkmj": 2,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTranscriptDeserializer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.core.JsonParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.JsonNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.StdDeserializer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Credit;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Deserializer for {@link seedu.address.model.ReadOnlyTranscript}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class JsonTranscriptDeserializer extends StdDeserializer\u003cReadOnlyTranscript\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public JsonTranscriptDeserializer(Class\u003cReadOnlyTranscript\u003e vc) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        super(vc);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public JsonTranscriptDeserializer() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        super(ReadOnlyTranscript.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ReadOnlyTranscript deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonNode node \u003d jp.getCodec().readTree(jp);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            JsonNode capGoal \u003d node.path(\"capGoal\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            if (!capGoal.isMissingNode()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                transcript.setCapGoal(capGoal.doubleValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            Iterator\u003cJsonNode\u003e elements \u003d node.get(\"modules\").get(\"internalList\").elements();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            while (elements.hasNext()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                JsonNode element \u003d elements.next();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Code code \u003d new Code(element.path(\"code\").path(\"value\").textValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Year year \u003d new Year(element.path(\"year\").path(\"value\").intValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Semester semester \u003d new Semester(element.path(\"semester\").path(\"value\").textValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Credit credits \u003d new Credit(element.path(\"credits\").path(\"value\").intValue());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Grade grade \u003d new Grade(element.path(\"grade\").path(\"value\").textValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                boolean completed \u003d element.path(\"completed\").booleanValue();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                Module module \u003d new Module(code, year, semester, credits, grade, completed);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                transcript.addModule(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            return transcript;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new IOException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTranscriptStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * A class to access Transcript stored in the hard disk as a json file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class JsonTranscriptStorage implements TranscriptStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private final Path filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public JsonTranscriptStorage(Path filePath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return readTranscript(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Similar to {@link #readTranscript()}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @param transcriptFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript(Path transcriptFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return JsonUtil.readJsonFile(transcriptFilePath, ReadOnlyTranscript.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonUtil.saveJsonFile(new Transcript(transcript), filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        requireNonNull(transcript);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonUtil.saveJsonFile(new Transcript(transcript), filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, TranscriptStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Saves the current version of the Transcript to the hard disk."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    void handleTranscriptChangedEvent(TranscriptChangedEvent tce);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 9,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Manages storage of Transcript data in local storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private TranscriptStorage transcriptStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            TranscriptStorage transcriptStorage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.transcriptStorage \u003d transcriptStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Transcript methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Path getTranscriptFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return transcriptStorage.getTranscriptFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return readTranscript(transcriptStorage.getTranscriptFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public Optional\u003cReadOnlyTranscript\u003e readTranscript(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return transcriptStorage.readTranscript(filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript) throws IOException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        saveTranscript(transcript, transcriptStorage.getTranscriptFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        transcriptStorage.saveTranscript(transcript, filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void handleTranscriptChangedEvent(TranscriptChangedEvent event) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local transcript data changed, saving to file\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            saveTranscript(event.data);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 48,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TranscriptStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Transcript}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public interface TranscriptStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    Path getTranscriptFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns Transcript data as a {@link ReadOnlyTranscript}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    Optional\u003cReadOnlyTranscript\u003e readTranscript() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @see #getTranscriptFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    Optional\u003cReadOnlyTranscript\u003e readTranscript(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Saves the given {@link ReadOnlyTranscript} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @param transcript cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    void saveTranscript(ReadOnlyTranscript transcript) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * @see #saveTranscript(ReadOnlyTranscript)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 48
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/EmptyTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 3
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/ExtraValuesTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"extraValue\": \"ignore this\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2102\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"extraValue\": \"ignore this\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"extraValue\": \"ignore this\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS1231\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2103\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 3"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2030\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"2\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"B\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  },"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"extraValue\": \"ignore this\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 82
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/InvalidAndValidTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"hello world\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2030\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"B\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2040\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"s1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"F\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 60
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/InvalidTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 0"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1819"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 24
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/NotJsonFormatTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "Not a json file!"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1
    }
  },
  {
    "path": "src/test/data/JsonTranscriptStorageTest/TypicalTranscript.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  \"modules\": {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    \"internalList\": ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS1231\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"A+\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2030\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 2"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"2\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"B+\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      },"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"code\": {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"CS2040\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"year\": {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 3"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"semester\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"s1\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"credits\": {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": 4"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"grade\": {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "          \"value\": \"F\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        },"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        \"completed\": true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "      }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "  }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Path SAVE_TRANSCRIPT_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"sampleTranscriptData.json\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Supplier\u003cReadOnlyTranscript\u003e initialTranscriptDataSupplier \u003d () -\u003e new Transcript();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Path saveTranscriptFileLocation \u003d SAVE_TRANSCRIPT_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            Supplier\u003cReadOnlyTranscript\u003e initialTranscriptDataSupplier, Path saveTranscriptFileLocation) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.initialTranscriptDataSupplier \u003d initialTranscriptDataSupplier;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        this.saveTranscriptFileLocation \u003d saveTranscriptFileLocation;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        if (initialTranscriptDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            //For some reason when testing my app locally, this line keeps creating a file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            // in my test directory instead of the sandbox (unlike \"sampleData.xml\"), which is annoying)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            // createJsonDataFileWithData(new Transcript(this.initialTranscriptDataSupplier.get()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            // this.saveTranscriptFileLocation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        userPrefs.setTranscriptFilePath(saveTranscriptFileLocation);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Creates a json file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private \u003cT\u003e void createJsonDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            JsonUtil.saveJsonFile(data, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 35,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void undoTranscript() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void redoTranscript() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitTranscript() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public double getCapGoal() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 63,
      "-": 208,
      "jeremiah-ang": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddModuleCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        new AddModuleCommand(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void executeModuleAcceptedByModelAddSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void executeDuplicateModuleThrowsCommandException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        AddModuleCommand addCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expectMessage(AddModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void resetData(ReadOnlyTranscript newData) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canUndoTranscript() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canRedoTranscript() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void undoTranscript() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void redoTranscript() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitTranscript() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public double getCapGoal() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateCapGoal(double capGoal) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public void commitTranscript() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        public ReadOnlyTranscript getTranscript() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            return new Transcript();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 262
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GoalCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private GoalCommandParser parser \u003d new GoalCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void parseValidCommandSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String userInput \u003d \"4.5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        GoalCommand expectedCommand \u003d new GoalCommand(4.5);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void parseInvalidNumberFormatFailure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String userInput \u003d \"4.5 3.5\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertParseFailure(parser, userInput, expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TranscriptTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.testutil.TypicalModules.MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getModulesWithNonGradeAffectingModules;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getModulesWithoutNonGradeAffectingModules;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * Test {@code TranscriptTest} Class"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class TranscriptTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    //@@author jeremiah-ang"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void typicalModulesCapScore() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d getModulesWithoutNonGradeAffectingModules();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCapScoreEquals(modules, MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void calculateCapScoreWithSuModule() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e modules \u003d getModulesWithNonGradeAffectingModules();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCapScoreEquals(modules, MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert that the modules will have the CAP score of expectedCapScore"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param modules"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedCapScore"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCapScoreEquals(List\u003cModule\u003e modules, Double expectedCapScore) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        Transcript transcript \u003d new Transcript();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        transcript.setModules(modules);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d transcript.getCap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertEquals(Double.valueOf(cap), expectedCapScore);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CodeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CodeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Code(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidCodeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String invalidCode \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Code(invalidCode));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidCode() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"\")); // cannot be blank"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\" CS2103\")); // no leading whitespace"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"CS2103 \")); // no leading whitespace"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Code.isValidCode(\"CS 2103\")); // no whitespace in between"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Code.isValidCode(\"CS2103\")); // no whitespace"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Code(\"CS2103\").toString().contentEquals(\"CS2103\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Code(\"CS2103\").equals(new Code(\"CS2103\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/CreditTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class CreditTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidCreditThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        int invalidCredit \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Credit(invalidCredit));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidCredit() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid code format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Credit.isValidCredit(0)); // must be greater than or equal to 1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Credit.isValidCredit(21)); // must be lower than or equal to 20"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Credit.isValidCredit(4)); // credit between 1 and 20"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Credit(4).toString().contentEquals(\"4\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Credit(4).equals(new Credit(4)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/GradeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class GradeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Grade(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidGradeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        String invalidGrade \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Grade(invalidGrade));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidGrade() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid grade format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\" A+\")); // no leading whitespace"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A+ \")); // no leading whitespace"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"A +\")); // no whitespace in between"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Grade.isValidGrade(\"G\")); // First character has to be A, B, C, D, F"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid grade"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A+\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"A-\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B+\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"B-\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C+\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"C\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D+\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"D\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"F\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"CU\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Grade.isValidGrade(\"CS\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void affectCapValid() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").affectsCap());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A\").affectsCap());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A-\").affectsCap());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B+\").affectsCap());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B\").affectsCap());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B-\").affectsCap());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C+\").affectsCap());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C\").affectsCap());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D+\").affectsCap());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D\").affectsCap());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"F\").affectsCap());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(new Grade(\"CS\").affectsCap());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(new Grade(\"CU\").affectsCap());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void getPointValid() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").getPoint() \u003d\u003d 5);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A\").getPoint() \u003d\u003d 5);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A-\").getPoint() \u003d\u003d 4.5);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B+\").getPoint() \u003d\u003d 4.0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B\").getPoint() \u003d\u003d 3.5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"B-\").getPoint() \u003d\u003d 3.0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C+\").getPoint() \u003d\u003d 2.5);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"C\").getPoint() \u003d\u003d 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D+\").getPoint() \u003d\u003d 1.5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"D\").getPoint() \u003d\u003d 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"F\").getPoint() \u003d\u003d 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").toString().contentEquals(\"A+\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Grade(\"A+\").equals(new Grade(\"A+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/ModuleTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DATABASE_SYSTEMS_2MC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DATA_STRUCTURES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DISCRETE_MATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                new Module(null, null, null, null, null, false));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.isSameModule(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different object -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.isSameModule(DISCRETE_MATH));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStructures \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.isSameModule(editedDataStructures));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module dataStructuresCopy \u003d new ModuleBuilder(DATA_STRUCTURES).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.equals(dataStructuresCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.equals(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(DISCRETE_MATH));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different code -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different year -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withYear(DISCRETE_MATH.getYear().value)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different semester -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withSemester(DISCRETE_MATH.getSemester().value)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different credit -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                .withCredit(DATABASE_SYSTEMS_2MC.getCredits().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different grade -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withGrade(DISCRETE_MATH.getGrade().value)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // different completed -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        editedDataStrucure \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCompleted(false)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(DATA_STRUCTURES.equals(editedDataStrucure));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(DATA_STRUCTURES.toString().contentEquals(\"Code: CS2040 Year: 3 Semester: \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                + \"s1 Credits: 4 Grade: F Completed: true\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 4,
      "alexkmj": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/SemesterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class SemesterTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidYearThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Semester(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidSemester() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid semester format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"s3\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Semester.isValidSemester(\"3\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid semester"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_ONE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_TWO));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_SPECIAL_ONE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Semester.isValidSemester(Semester.SEMESTER_SPECIAL_TWO));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Semester(Semester.SEMESTER_ONE).toString().contentEquals(Semester.SEMESTER_ONE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Semester(Semester.SEMESTER_ONE).equals(new Semester(Semester.SEMESTER_ONE)));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/UniqueModuleListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DATA_STRUCTURES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static seedu.address.testutil.TypicalModules.DISCRETE_MATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class UniqueModuleListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsModuleNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(uniqueModuleList.contains(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void containsModuleInListReturnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(uniqueModuleList.contains(DATA_STRUCTURES));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void addDuplicateModuleThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleNullTargetModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(null, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleNullEditedModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleTargetModuleNotInListThrowsModuleNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleIsSameModuleSuccess() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Module editedDataStructures \u003d new ModuleBuilder(DATA_STRUCTURES)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .withCode(DISCRETE_MATH.getCode().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, editedDataStructures);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(editedDataStructures);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasDifferentIdentitySuccess() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DISCRETE_MATH);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModuleEditedModuleHasNonUniqueIdentityThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModule(DATA_STRUCTURES, DISCRETE_MATH);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeNullModuleThrowsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeModuleDoesNotExistThrowsModuleNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(ModuleNotFoundException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void removeExistingModuleRemovesModule() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.remove(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesNullUniqueModuleListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules((UniqueModuleList) null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesUniqueModuleListReplacesOwnListWithProvidedUniqueModuleList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(expectedUniqueModuleList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules((List\u003cModule\u003e) null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.add(DATA_STRUCTURES);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e moduleList \u003d Collections.singletonList(DISCRETE_MATH);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(moduleList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        UniqueModuleList expectedUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        expectedUniqueModuleList.add(DISCRETE_MATH);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertEquals(expectedUniqueModuleList, uniqueModuleList);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void setModulesListWithDuplicateModuleThrowsDuplicateModuleException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        List\u003cModule\u003e listWithDuplicateModules \u003d Arrays.asList(DATA_STRUCTURES, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(DuplicateModuleException.class);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.setModules(listWithDuplicateModules);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        uniqueModuleList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 1,
      "alexkmj": 177
    }
  },
  {
    "path": "src/test/java/seedu/address/model/module/YearTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class YearTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Year(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void constructorInvalidYearThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Year(\"0\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void isValidYear() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // invalid year format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(0)); // year must be at least 1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(6)); // year must be 5 or below"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertFalse(Year.isValidYear(10)); // only 1 digit allowed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        // valid year format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(1)); // year 1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(2)); // year 2"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(3)); // year 3"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(4)); // year 4"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(Year.isValidYear(5)); // year 5"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void toStringValid() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).toString().contentEquals(\"1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void equalsValid() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).equals(new Year(1)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public void hashCodeValid() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        assertTrue(new Year(1).hashCode() \u003d\u003d \"1\".hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alexkmj": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTranscriptStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTranscriptWithModules;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "public class JsonTranscriptStorageTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"B\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"F\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(2)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTranscriptStorageTest\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Optional\u003cReadOnlyTranscript\u003e readTranscript(String filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return new JsonTranscriptStorage(Paths.get(filePath)).readTranscript(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String transcriptFileInTestDataFolder) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return transcriptFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(transcriptFileInTestDataFolder)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertFalse(readTranscript(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void read_emptyTranscript_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"EmptyTranscript.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"NotJsonFormatTranscript.json\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_invalidModuleTranscript_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"InvalidTranscript.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_invalidAndValidModuleTranscript_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readTranscript(\"InvalidAndValidTranscript.json\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript expected \u003d getTranscriptWithModules("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                DATABASE_SYSTEMS, DISCRETE_MATH, SOFTWARE_ENGINEERING, PROGRAMMING_METHODOLOGY_TWO);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript actual \u003d new Transcript(readTranscript(\"ExtraValuesTranscript.json\").get());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readTranscript_typicalTranscript_noException() throws DataConversionException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript typical \u003d new Transcript(readTranscript(\"TypicalTranscript.json\").get());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void readAndSaveTranscript_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempTranscript.json\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript original \u003d getTranscriptWithModules(DISCRETE_MATH, PROGRAMMING_METHODOLOGY_TWO, DATA_STRUCTURES);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonTranscriptStorage jsonTranscriptStorage \u003d new JsonTranscriptStorage(filePath);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        jsonTranscriptStorage.saveTranscript(original, filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        ReadOnlyTranscript readBack \u003d jsonTranscriptStorage.readTranscript(filePath).get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(readBack));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        original.addModule(SOFTWARE_ENGINEERING);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        original.removeModule(DISCRETE_MATH);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        jsonTranscriptStorage.saveTranscript(original, filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readBack \u003d jsonTranscriptStorage.readTranscript(filePath).get();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(readBack));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        original.addModule(DATABASE_SYSTEMS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        jsonTranscriptStorage.saveTranscript(original); //file path not specified"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        readBack \u003d jsonTranscriptStorage.readTranscript().get(); //file path not specified"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(readBack));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript_nullTranscript_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        saveTranscript(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Saves {@code Transcript} at the specified {@code filePath}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    private void saveTranscript(ReadOnlyTranscript transcript, String filePath) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            new JsonTranscriptStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                    .saveTranscript(transcript, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void saveTranscript_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        saveTranscript(new Transcript(), null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import static seedu.address.testutil.TypicalModules.getTypicalTranscript;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.commons.events.model.TranscriptChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        JsonTranscriptStorage transcriptStorage \u003d new JsonTranscriptStorage(getTempFilePath(\"transcript\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage, transcriptStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * More extensive testing of addressbook saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")), new JsonTranscriptStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void transcriptReadSave() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * {@link JsonTranscriptStorage} class."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         * More extensive testing of transcript saving/reading is done in {@link JsonTranscriptStorageTest} class."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "         */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript original \u003d getTypicalTranscript();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storageManager.saveTranscript(original);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        ReadOnlyTranscript retrieved \u003d storageManager.readTranscript().get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertEquals(original, new Transcript(retrieved));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void getTranscriptFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertNotNull(storageManager.getTranscriptFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public void handleTranscriptChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        // Create a StorageManager while injecting a stub that throws an exception when the save method is called"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                new JsonTranscriptStorageExceptionThrowingStub(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        storage.handleTranscriptChangedEvent(new TranscriptChangedEvent(new Transcript()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * An addressbok stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * A transcript stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    class JsonTranscriptStorageExceptionThrowingStub extends JsonTranscriptStorage {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        public JsonTranscriptStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        public void saveTranscript(ReadOnlyTranscript transcript, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 53,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalModules.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "import seedu.address.model.module.Semester;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.util.ModuleBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alexkmj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DISCRETE_MATH \u003d new ModuleBuilder().withCode(\"CS1231\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module PROGRAMMING_METHODOLOGY_TWO \u003d new ModuleBuilder().withCode(\"CS2030\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_TWO)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withGrade(\"B+\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static final Module DATA_STRUCTURES \u003d new ModuleBuilder().withCode(\"CS2040\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withSemester(Semester.SEMESTER_SPECIAL_ONE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .withGrade(\"F\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final Module ASKING_QUESTIONS \u003d new ModuleBuilder().withCode(\"GEQ1000\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withYear(1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .withGrade(\"CS\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static final Double MODULES_WITHOUT_NON_AFFECTING_MODULES_CAP \u003d 3.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module SOFTWARE_ENGINEERING \u003d new ModuleBuilder().withCode(\"CS2103\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(3)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS \u003d new ModuleBuilder().withCode(\"CS2102\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(4)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static final Module DATABASE_SYSTEMS_2MC \u003d new ModuleBuilder().withCode(\"CS2102B\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withYear(2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withSemester(Semester.SEMESTER_ONE)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withCredit(2)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .withGrade(\"A+\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     * Prevents instantiation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    private TypicalModules() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alexkmj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns an {@code Transcript} given modules as arguments."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static Transcript getTranscriptWithModules(Module... modules) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns an {@code Transcript} with all the typical persons."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public static Transcript getTypicalTranscript() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        Transcript tr \u003d new Transcript();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            tr.addModule(module);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return tr;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCRETE_MATH,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                DATA_STRUCTURES));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * A list of modules that affects the cap"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static List\u003cModule\u003e getModulesWithoutNonGradeAffectingModules() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DISCRETE_MATH,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                PROGRAMMING_METHODOLOGY_TWO,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "                DATA_STRUCTURES));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * A list of modules that might not affect the cap"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public static List\u003cModule\u003e getModulesWithNonGradeAffectingModules() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e affectingModules \u003d getModulesWithoutNonGradeAffectingModules();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        List\u003cModule\u003e nonAffectingModules \u003d new ArrayList\u003c\u003e(Arrays.asList(ASKING_QUESTIONS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        affectingModules.addAll(nonAffectingModules);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return affectingModules;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "    // TODO: getTypicalAddressBook()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alexkmj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 49,
      "alexkmj": 53,
      "jeremiah-ang": 26
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.Transcript;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.testutil.TypicalModules;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        //TODO: Remove addressbook initial data"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        testApp \u003d setupHelper.setupApplication("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                this::getInitialData, getDataFileLocation(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                this::getInitialTranscriptData, getTranscriptDataFileLocation());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    //TODO: Remove"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns the transcript data to be loaded into the file in {@link #getTranscriptDataFileLocation()}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Transcript getInitialTranscriptData() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return TypicalModules.getTypicalTranscript();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    //TODO: Remove"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Returns the directory of the transcript data file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    protected Path getTranscriptDataFileLocation() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return TestApp.SAVE_TRANSCRIPT_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 26,
      "-": 290
    }
  },
  {
    "path": "src/test/java/systemtests/CapCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.CapCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class CapCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void cap() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         * Empty system should show cap \u003d 0"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        executeCommand(CapCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double cap \u003d 0.0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", String.format(CapCommand.MESSAGE_SUCCESS, cap), getModel());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 19
    }
  },
  {
    "path": "src/test/java/systemtests/GoalCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.logic.commands.GoalCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "//@@author jeremiah-ang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " * System test for Goal Command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "public class GoalCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void setGoalSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        /* Case: Set goal with valid value"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         * -\u003e goal command handled correctly"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double newGoal \u003d 4.5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertGoalSuccess(newGoal);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        newGoal \u003d 5.0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertGoalSuccess(newGoal);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void setGoalFailure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        /* Case: Set goal with valid value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         * -\u003e goal command handled correctly"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        double newGoal \u003d -1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertGoalFailure(newGoal);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert that the given goal would result in a failure action."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertGoalFailure(double goal) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GoalCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCommandFailure(getCommandString(goal), getModel(), expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert that the given goal would result in a successful action."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param goal"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    public void assertGoalSuccess(double goal) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        String expectedResultMessage \u003d String.format(GoalCommand.MESSAGE_SUCCESS, goal);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertCommandSuccess(getCommandString(goal), getModel(), expectedResultMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private String getCommandString(double goal) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        return GoalCommand.COMMAND_WORD + \" \" + goal;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * Assert given command would be successful"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedModel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     * @param expectedResultMessage"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    private void assertCommandFailure(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeremiah-ang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremiah-ang": 73
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "import seedu.address.model.ReadOnlyTranscript;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                                    Supplier\u003cReadOnlyTranscript\u003e transcript, Path saveTranscriptFileLocation) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                    testApp \u003d new TestApp(addressBook, saveFileLocation,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "                            transcript, saveTranscriptFileLocation));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeremyyew"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeremyyew": 18,
      "-": 60
    }
  }
]
