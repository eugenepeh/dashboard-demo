[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d Hallper: All The Hallp You Will Ever Need"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-1/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/HallperCI/main/branch/master[image:https://ci.appveyor.com/api/projects/status/io5xs6dmt5acsxw0/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/HallperCI/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-W16-1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/75c6f4f2d2664849a4eb4b0873f21f77[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d About Hallper"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper is a professional desktop application that provides administrative convenience for JCRC members within the Halls of NUS. Duties such as consolidating resident contacts, mass blasting notifications to residents and keeping track of hall events are now ridiculously simplified with Hallper. Without a need for mouse control, every command input through the keyboard will suffice to carry out these duties. With our simple user interface, any JCRC member can easily master the utilities in Hallper to bring hall administrative duties to greater heights."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d Key Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper provides the following features to improve the experience of JCRC members in carrying out hall duties:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Convenient clearing and importing of multiple contacts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Tagging contacts by categories (CCA, block, etc)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Filtering through contacts quickly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Profile view of contacts"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Budget allocation and management"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Mass emailing to multiple contacts"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Calendar to update monthly events"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Original source of the code AddressBook-Level4 project was created by https://github.com/se-edu/[SE-EDU] initiative"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://www.simplejavamail.org/#/about[SimpleJavaMail], https://github.com/ical4j/ical4j[iCal4j]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 15,
      "-": 29,
      "GilgameshTC": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Hallper was developed by https://cs2103-ay1819s1-w16-1.github.io/main/[TEAM W16-1].  +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "We are a TEAM W16-1 based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d ERIC YANG JIA WEI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::ericyjw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/ericyjw[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of budgeting feature"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d JAVEN SEOW YU BIN"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::javenseow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/javenseow[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of profile view GUI feature \u0026 email feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d KOK YUAN"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::eatorbeeaten.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/eatorbeeaten[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of email feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d SHANNA LIM KENG WOON"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::kengwoon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/kengwoon[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of import and filter feature"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d TRAVIS CHING JIA YEA"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image::gilgameshtc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/gilgameshtc[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer  +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of calendar feature"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 20,
      "-": 38
    }
  },
  {
    "path": "docs/team/eatorbeeaten.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d KOK YUAN - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/ericyjw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d ERIC YANG JIA WEI- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/gilgameshtc.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d TRAVIS CHING JIA YEA - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/kengwoon.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d SHANNA LIM KENG WOON - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/team.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d TEAM W16-1 Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.storage.BudgetBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.EmailDirStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.EmailStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.IcsCalendarStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.storage.XmlBudgetBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        BudgetBookStorage budgetBookStorage \u003d new XmlBudgetBookStorage(userPrefs.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailStorage emailStorage \u003d new EmailDirStorage(userPrefs.getEmailPath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, budgetBookStorage, userPrefsStorage, calendarStorage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            emailStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * userPrefs}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Optional\u003cReadOnlyBudgetBook\u003e budgetBookOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ReadOnlyBudgetBook initialBudgetData;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetBookOptional \u003d storage.readBudgetBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (!budgetBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BudgetBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialBudgetData \u003d budgetBookOptional.orElseGet(SampleDataUtil::getSampleBudgetBook);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BudgetBook\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialBudgetData \u003d new BudgetBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BudgetBook\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialBudgetData \u003d new BudgetBook();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new ModelManager(initialAddressData, initialBudgetData, userPrefs);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 26,
      "-": 207
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String appTitle \u003d \"Hallper\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CalendarCreatedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.CalendarModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/** Indicates a calendar has been created*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarCreatedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final CalendarModel data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarCreatedEvent(CalendarModel data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return \"number of calendars \" + data.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/EmailSavedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Indicates the Email in the model has been saved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailSavedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public final EmailModel data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public EmailSavedEvent(EmailModel data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return data.getEmail().getSubject();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 18,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CcaPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Cca newSelection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaPanelSelectionChangedEvent(Cca newSelection) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca getNewSelection() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToBudgetRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class JumpToBudgetRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public JumpToBudgetRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewBudgetResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class NewBudgetResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public NewBudgetResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowBudgetViewEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * An event requesting to view the budget page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class ShowBudgetViewEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code tags} contains the {@code word}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tags cannot be null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty and must be a single word"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author javenseow"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean containsFieldIgnoreCase(String tags, String word) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String preppedTags \u003d tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String[] wordsInTagsSentence \u003d preppedTags.split(\",\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        for (int i \u003d 0; i \u003c wordsInTagsSentence.length; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            wordsInTagsSentence[i] \u003d wordsInTagsSentence[i].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return Arrays.stream(wordsInTagsSentence)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 19,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of CCAs */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    ObservableList\u003cCca\u003e getFilteredCcaList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cCca\u003e getFilteredCcaList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return model.getFilteredCcaList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ROOM + \"ROOM \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SCHOOL + \"SCHOOL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ROOM + \"C420 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + PREFIX_SCHOOL + \"FacultyOfScience \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"soccer \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"track\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.ShowBudgetViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.TagContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * View the budget of the whole hall or by their CCA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View the budget of the whole hall or by each CCA \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"\\nParameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"overall\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" overall\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \" or\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Parameters: \" + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" basketball\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String SHOWING_BUDGET_MESSAGE \u003d \"Display budget.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final TagContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetCommand(TagContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        EventsCenter.getInstance().post(new ShowBudgetViewEvent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new CommandResult(SHOWING_BUDGET_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof BudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 predicate.equals(((BudgetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsRoomPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all persons tagged with or under \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"the specified keywords(case-insensitive) or clears all persons for keyword \u0027all\u0027.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" all\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" basketball\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CLEAR_ALL_SUCCESS \u003d \"Hallper has been cleared!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CLEAR_SPECIFIC_SUCCESS \u003d \"Cleared persons under %1$s in Hallper\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CLEAR_NOTHING \u003d \"No persons found under %1$s in Hallper\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final ContactContainsTagPredicate predicateTag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final ContactContainsRoomPredicate predicateRoom;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e target;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ArrayList\u003cPerson\u003e toClear;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private List\u003cPerson\u003e fullList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private boolean clearAll;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private boolean clearRoom;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ClearCommand(List\u003cString\u003e target) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.predicateTag \u003d new ContactContainsTagPredicate(target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.predicateRoom \u003d new ContactContainsRoomPredicate(target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.clearAll \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.clearRoom \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.toClear \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.fullList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (String s : target) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (s.toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                this.clearAll \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (Room.isValidRoom(s)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                this.clearRoom \u003d true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (clearAll) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return clearAll(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return clearSpecific(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Clears data in entire address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param model model component"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandResult clearAll(Model model) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_ALL_SUCCESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Clears data of specific tags."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param model model component"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandResult clearSpecific(Model model) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        toClear.clear();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (clearRoom ? predicateRoom.test(p) : predicateTag.test(p)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                toClear.add(p);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (toClear.isEmpty()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEAR_NOTHING, target));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.clearMultiplePersons(toClear);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_SPECIFIC_SUCCESS, target));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 97,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ComposeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Composes email and writes it to hard disk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class ComposeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"compose\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Composes an email. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_FROM + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_TO + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_FROM + \"johndoe@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_TO + \"samsee@example.com \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_SUBJECT + \"Meeting this Friday \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_CONTENT + \"Hey there\u0027s a meeting this friday. \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Email composed: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private final Email toCompose;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public ComposeCommand(Email email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        toCompose \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        model.saveEmail(toCompose);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toCompose.getSubject()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 35,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateCalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Creates a Calendar with a specified month, year and writes it to hard disk."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CreateCalendarCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create_calendar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a calendar. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"MMM \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"YYYY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"OCT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"2018 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar created: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_EXISTING_CALENDAR \u003d \"This calendar already exists in Hallper\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CreateCalendarCommand(Month month, Year year) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (model.isExistingCalendar(year, month)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_CALENDAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        model.createCalendar(year, month);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month + \"-\" + year + \".ics\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof CreateCalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((CreateCalendarCommand) other).month)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((CreateCalendarCommand) other).year));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "GilgameshTC": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EraseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class EraseCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"erase\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Erases specified tag(s) from all persons in Hallper\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" basketball\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_ERASE_SUCCESS \u003d \"Erased %1$s from persons in Hallper\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_NOTHING_ERASED \u003d \"No persons under %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final ContactContainsTagPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e target;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ArrayList\u003cPerson\u003e toErase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ArrayList\u003cPerson\u003e modifiedPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private List\u003cPerson\u003e fullList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Person temp;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public EraseCommand(List\u003cString\u003e target, ContactContainsTagPredicate predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.toErase \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.modifiedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.fullList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        toErase.clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        modifiedPersons.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (new ContactContainsTagPredicate(target).test(p)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                toErase.add(p);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : toErase) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            tags.clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            for (Tag t : p.getTags()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                tags.add(t);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                for (String tag : target) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    if (t.toStringOnly().equals(tag)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        tags.remove(t);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            temp \u003d new Person(p.getName(), p.getPhone(), p.getEmail(), p.getRoom(), p.getSchool(), tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            modifiedPersons.add(temp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (modifiedPersons.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOTHING_ERASED, target));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.removeTagsFromPersons(modifiedPersons, toErase);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ERASE_SUCCESS, target));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose data fields match any of the argument keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "// @@author javenseow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who are tagged with \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"any of the specified keywords (case insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" soccer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private final FieldsContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public SearchCommand(FieldsContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof SearchCommand // instance of handles null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 6,
      "javenseow": 30,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ComposeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateCalendarCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.EraseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        case EraseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new EraseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case ComposeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ComposeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        case CreateCalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CreateCalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "ericyjw": 4,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.TagContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Parses input arguments and creates a new BudgetCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * and returns a BudgetCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new BudgetCommand(new TagContainsKeywordPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses the given {@code String} argument in the context of the ClearCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * and returns an ClearCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new ClearCommand(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SCHOOL \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_NULL \u003d new Prefix(null);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"subject/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"content/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"month/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"year/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ComposeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import org.simplejavamail.email.EmailBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import seedu.address.logic.commands.ComposeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class ComposeCommandParser implements Parser\u003cComposeCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ComposeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * and returns an ComposeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public ComposeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FROM, PREFIX_TO, PREFIX_SUBJECT, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FROM, PREFIX_TO, PREFIX_SUBJECT, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ComposeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String from \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_FROM).get()).toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String to \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_TO).get()).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get()).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()).toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Email email \u003d EmailBuilder.startingBlank()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .from(from)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .to(to)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .withSubject(subject)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .withPlainText(content)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .buildEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new ComposeCommand(email);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateCalendarCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Parses input arguments and creates a new CreateCalendarCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CreateCalendarCommandParser implements Parser\u003cCreateCalendarCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCalendarCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * and returns an CreateCalendarCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CreateCalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CreateCalendarCommand(month, year);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "GilgameshTC": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EraseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.EraseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class EraseCommandParser implements Parser\u003cEraseCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses the given {@code String} argument in the context of the EraseCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * and returns an EraseCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public EraseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EraseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new EraseCommand(Arrays.asList(nameKeywords),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new ContactContainsTagPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Content;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String room} into a {@code Room}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code room} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author javenseow"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static Room parseRoom(String room) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedRoom \u003d room.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (!Room.isValidRoom(trimmedRoom)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException(Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new Room(trimmedRoom);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses a {@code String school} into a {@code School}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @throws ParseException if the given {@code school} is invalid."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static School parseSchool(String school) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedSchool \u003d school.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (!School.isValidSchool(trimmedSchool)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException(School.MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new School(trimmedSchool);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Parses a {@code String content} into an {@code Content}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Parses a {@code String subject} into an {@code Subject}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        if (!Subject.isValidSubject(trimmedSubject)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new Subject(trimmedSubject);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Transform month to upper case"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        trimmedMonth \u003d trimmedMonth.toUpperCase();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Month.isValidMonthRegex(trimmedMonth) || !Month.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Month.MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Month(trimmedMonth);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 31,
      "javenseow": 25,
      "-": 136,
      "GilgameshTC": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new SearchCommand(new FieldsContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 20,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.UniqueCcaList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Wraps all budget data at the budget-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Duplicates in CCA tags are not allowed (by .isSameCCA comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetBook implements ReadOnlyBudgetBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final UniqueCcaList ccas;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas \u003d new UniqueCcaList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates a Budget Book using the CCAs in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBook(ReadOnlyBudgetBook toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Resets the existing data of this {@code BudgetBook} with {@code newData}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void resetData(ReadOnlyBudgetBook newData) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        setCcas(newData.getCcaList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the contents of the CCA list with {@code CCAs}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code CCAs} must not contain duplicate CCAs."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCcas(List\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.ccas.setCcas(ccas);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //// CCA-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a CCA {@code tag} exists in the Budget Book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(Cca cca) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(cca);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.contains(cca);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds a CCA to the Budget Book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA must not already exist in the Budget Book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void addCca(Cca cca) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.add(cca);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the given CCA {@code target} in the list with {@code editedCca}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the Budget Book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA {@code editedCCA} must not be the same as another existing CCA in the Budget Book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void updateCca(Cca target, Cca editedCca) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(editedCca);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.setCca(target, editedCca);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Removes {@code cca} from this {@code BudgetBook}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code cca} must exist in the Budget book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void removeCca(Cca key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.asUnmodifiableObservableList().size() + \" CCAs\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cCca\u003e getCcaList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof BudgetBook // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 ccas.equals(((BudgetBook) other).ccas));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.component.VEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.CalScale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.ProdId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.util.FixedUidGenerator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.util.UidGenerator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Wraps Calendar Data"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarModel {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarModel(CalendarStorage calendarStorage, Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.existingCalendar \u003d existingCalendar;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if calendar to be created already exists. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Set\u003cMonth\u003e yearExists \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (yearExists !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            for (Month existingMonths : yearExists) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                if (month.equals(existingMonths)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Creates the calendar file. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Year year, Month month) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Initialize the calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(new ProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(Version.VERSION_2_0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(CalScale.GREGORIAN);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Dummy Event"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar cal \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.DAY_OF_MONTH, 25);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Initialise as an all day event"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VEvent christmas \u003d new VEvent(new net.fortuna.ical4j.model.Date(cal.getTime()), \"Christmas Day\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Generate a UID for the event"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        UidGenerator ug \u003d new FixedUidGenerator(\"1\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        christmas.getProperties().add(ug.generateUid());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getComponents().add(christmas);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create the calendar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(calendar, calendarName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Update existing calendar map"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Set\u003cMonth\u003e yearOfCal \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (yearOfCal \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            Set\u003cMonth\u003e newYearOfCal \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            newYearOfCal.add(month);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            existingCalendar.put(year, newYearOfCal);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            yearOfCal.add(month);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Returns the updated Map: existingCalendar. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Map\u003cYear, Set\u003cMonth\u003e\u003e updateExistingCalendar() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return existingCalendar;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Returns the number of calendar in hard disk. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (Year year : existingCalendar.keySet()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            Set\u003cMonth\u003e monthsOfYear \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (monthsOfYear !\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                size +\u003d monthsOfYear.size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!(other instanceof CalendarModel)) { //this handles null as well."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarModel o \u003d (CalendarModel) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.equals(o.calendarStorage)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 existingCalendar.equals(o.existingCalendar);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Objects.hash(calendarStorage, existingCalendar);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "GilgameshTC": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EmailModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Wraps Email data."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailModel {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(Email email) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 16,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Returns the BudgetBook"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    ReadOnlyBudgetBook getBudgetBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Clears the given persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * The persons must exist in the address book."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void clearMultiplePersons(List\u003cPerson\u003e target);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Removes tag(s) from given persons."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * The persons must exist in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void removeTagsFromPersons(List\u003cPerson\u003e target, List\u003cPerson\u003e original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Updates the filter of the filtered cca list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void updateFilteredCcaList(Predicate\u003cCca\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns an unmodifiable view of the filtered CCA list"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    ObservableList\u003cCca\u003e getFilteredCcaList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the email to hard disk"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveEmail(Email email);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model already has a calendar with the same month and year"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isExistingCalendar(Year year, Month month);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the given calendar"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code year} and {@code month} must not already be an existing calendar"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void createCalendar(Year year, Month month);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the existing calendar map inside UserPrefs Json file"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateExistingCalendar();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 18,
      "ericyjw": 25,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.CalendarCreatedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EmailSavedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.IcsCalendarStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final VersionedBudgetBook versionedBudgetBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final FilteredList\u003cCca\u003e filteredCcas;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EmailModel emailModel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CalendarModel calendarModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, budgetBook, userPrefs and calendarStorage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyBudgetBook budgetBook, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        CalendarStorage calendarStorage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, calendarStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" , user prefs \" + userPrefs"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" and calendar: \" + calendarStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook \u003d new VersionedBudgetBook(budgetBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredCcas \u003d new FilteredList\u003c\u003e(versionedBudgetBook.getCcaList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailModel \u003d new EmailModel();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, budgetBook and userPrefs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyBudgetBook budgetBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook \u003d new VersionedBudgetBook(budgetBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        filteredCcas \u003d new FilteredList\u003c\u003e(versionedBudgetBook.getCcaList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailModel \u003d new EmailModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this(new AddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ModelManager(AddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook \u003d new VersionedBudgetBook(new BudgetBook());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredCcas \u003d new FilteredList\u003c\u003e(versionedBudgetBook.getCcaList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        emailModel \u003d new EmailModel();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ReadOnlyBudgetBook getBudgetBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return versionedBudgetBook;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void clearMultiplePersons(List\u003cPerson\u003e target) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : target) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            versionedAddressBook.removePerson(p);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void removeTagsFromPersons(List\u003cPerson\u003e target, List\u003cPerson\u003e original) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (int i \u003d 0; i \u003c target.size(); i++) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            updatePerson(original.get(i), target.get(i));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ObservableList\u003cCca\u003e getFilteredCcaList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCcas);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updateFilteredCcaList(Predicate\u003cCca\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredCcas.setPredicate(predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Raises an event to indicate the calendar model has changed"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void indicateCalendarModelChanged() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        raise(new CalendarCreatedEvent(calendarModel));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireAllNonNull(year, month);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarModel.isExistingCalendar(year, month);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.createCalendar(year, month);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            updateExistingCalendar();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            indicateCalendarModelChanged();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to save calendar(ics) file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void updateExistingCalendar() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        userPrefs.setExistingCalendar(calendarModel.updateExistingCalendar());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (filteredPersons \u003d\u003d null) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return versionedAddressBook.equals(other.versionedAddressBook);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } else if (calendarModel \u003d\u003d null) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 calendarModel.equals(other.calendarModel);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Compose email \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(Email email) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        emailModel.saveEmail(email);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        indicateEmailSaved();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private void indicateEmailSaved() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        raise(new EmailSavedEvent(emailModel));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 115,
      "EatOrBeEaten": 16,
      "ericyjw": 9,
      "-": 121,
      "GilgameshTC": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Unmodifiable view of a budget book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public interface ReadOnlyBudgetBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns an unmodifiable view of the cca list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This list will not contain any duplicate cca."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    ObservableList\u003cCca\u003e getCcaList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Path budgetBookFilePath \u003d Paths.get(\"data\", \"ccabook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path emailPath \u003d Paths.get(\"email\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path calendarPath \u003d Paths.get(\"calendar\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        setExistingCalendar(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getBudgetBookFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBookFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setBudgetBookFilePath(Path budgetBookFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budgetBookFilePath \u003d budgetBookFilePath;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //author@@ EatOrBeEaten"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getEmailPath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailPath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmailPath(Path emailPath) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailPath \u003d emailPath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarPath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void setCalendarPath(Path calendarPath) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarPath \u003d calendarPath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Map\u003cYear, Set\u003cMonth\u003e\u003e getExistingCalendar() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return existingCalendar;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void setExistingCalendar(Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.existingCalendar \u003d existingCalendar;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(emailPath, o.emailPath)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(calendarPath, o.calendarPath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, calendarPath, emailPath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nEmail directory location : \" + emailPath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCalendar directory location : \" + calendarPath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 9,
      "-": 91,
      "GilgameshTC": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedBudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * {@code BudgetBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class VersionedBudgetBook extends BudgetBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final List\u003cReadOnlyBudgetBook\u003e budgetBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public VersionedBudgetBook(ReadOnlyBudgetBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList.add(new BudgetBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves a copy of the current {@code BudgetBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList.add(new BudgetBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList.subList(currentStatePointer + 1, budgetBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Restores the budget book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resetData(budgetBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Restores the budget book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resetData(budgetBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code undo()} has budget book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code redo()} has budget book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return currentStatePointer \u003c budgetBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof VersionedBudgetBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        VersionedBudgetBook otherVersionedBudgetBook \u003d (VersionedBudgetBook) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return super.equals(otherVersionedBudgetBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 budgetBookStateList.equals(otherVersionedBudgetBook.budgetBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedBudgetBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            super(\"Current state pointer at start of budgetBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            super(\"Current state pointer at end of budgetBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a Budget entry."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static int initialSpending \u003d 0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private int initial;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private int spent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private int outstanding;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Transaction transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Budget(int initial) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.initial \u003d initial;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d initialSpending;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d initial;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d new Transaction();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Budget(int initial, int spent, int outstanding, Transaction transaction) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.initial \u003d initial;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d spent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d outstanding;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getGivenBudget() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return initial;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getSpent() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return spent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getOutstanding() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return outstanding;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTransactionLog() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return transaction.getTransactionLog();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both budget entry have the same data fields."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof Budget)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Budget otherBudget \u003d (Budget) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return otherBudget.getGivenBudget() \u003d\u003d getGivenBudget()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherBudget.getOutstanding() \u003d\u003d getOutstanding()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherBudget.getTransactionLog().equals(getTransactionLog());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Transaction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represent the transaction log."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String log;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Transaction() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.log \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Transaction(String log) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.log \u003d log;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTransactionLog() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return log;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Update the transaction log by appending new entry"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param entry new transaction entry"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void updateTransaction(String entry) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(this.log);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        sb.append(entry);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both ccas have the same identity and data fields."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Transaction otherBudget \u003d (Transaction) other;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return otherBudget.getTransactionLog().equals(getTransactionLog());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Month.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a month in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMonthRegex(String)};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * is valid as declared in {@link #isValidMonth(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_MONTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Months should only be three characters long, and a valid month in the calendar. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"It should also not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MONTH_VALIDATION_REGEX \u003d \"^[a-zA-Z]{3}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // List of strings that represent valid months"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String[] VALID_MONTHS \u003d {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JAN\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"FEB\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"MAR\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"APR\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"MAY\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JUN\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JUL\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"AUG\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"SEP\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"OCT\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"NOV\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"DEC\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param month A valid month."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Month(String month) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidMonthRegex(month), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        month \u003d month.toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidMonth(month), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Month() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // default create a JAN month obj"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // For Json parsing, have to have a default constructor"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this(\"JAN\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string follows the correct month regex."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidMonthRegex(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return test.matches(MONTH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string is a valid month."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        boolean isValid \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (String monthName : VALID_MONTHS) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (test.compareTo(monthName) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                isValid \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns a string listing all the valid months."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static String listValidMonths() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (String month : VALID_MONTHS) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            sb.append(\"\\n\" + month);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((Month) other).month)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return month.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a year in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Year should be a 4 digit integer, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d \"^\\\\d{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Constructs a {@code Year}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Year() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // default create a 2018 year obj"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // For Json parsing, have to have a default constructor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this(\"2018\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return test.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((Year) other).year)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return year.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/Cca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Cca {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_CCA_CONSTRAINTS \u003d \"CCAs names should only contain letters and brackets\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String CCA_VALIDATION_REGEX \u003d \"\\\\p{Alpha} + \\\\p{Punct} +\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Tag ccaName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Person head;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Person viceHead;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Every identity field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Data field can be null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca(Tag ccaName, Person head, Person viceHead, Budget budget) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(ccaName, head, viceHead);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.ccaName \u003d ccaName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d viceHead;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Alternative constructor."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * In the event that there is no vice-head in the CCA."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@viceHead} will be assigned null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca(Tag ccaName, Person head, Budget budget) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(ccaName, head);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.ccaName \u003d ccaName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a given string is a valid CCA name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidCcaName(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(CCA_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getCcaName() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccaName.toString().replaceAll(\"\\\\p{P}\", \"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getHead() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return head.getName().toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getViceHead() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!viceHead.equals(null)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return viceHead.getName().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getGivenBudget() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget.getGivenBudget();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getSpent() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget.getSpent();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getOutstanding() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget.getOutstanding();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTransactionLog() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget.getTransactionLog();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both CCAs are the same."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isSameCca(Cca otherCca) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (otherCca \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both ccas have the same identity and data fields."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof Cca)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Cca otherCca \u003d (Cca) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return otherCca.getCcaName().equals(getCcaName())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.getHead().equals(getHead())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.getViceHead().equals(getViceHead())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.budget.equals(this.budget);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return Objects.hash(ccaName, head, viceHead, budget);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/CommitteeCca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Generate a Committee CCA."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CommitteeCca extends Cca {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Every identity field must be present and not null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Data field can be null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CommitteeCca(Tag ccaName, Person head, Person viceHead, Budget budget) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(ccaName, head, viceHead, budget);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Alternative constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * In the event that there is no vice-head in the Committee CCA."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@viceHead} will be assigned null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CommitteeCca(Tag ccaName, Person head, Budget budget) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(ccaName, head, budget);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        builder.append(\"CCA: \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getCcaName())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nHead: \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getHead())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\tVice-Head: \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getViceHead())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nGiven Budget: \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getGivenBudget())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nSpent: \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getSpent())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\tOutstanding: \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getOutstanding())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nTransaction History:\\n\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getTransactionLog());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/CulturalCca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Generate a cultural CCA."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CulturalCca extends Cca {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Every identity field must be present and not null."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Data field can be null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CulturalCca(Tag ccaName, Person head, Person viceHead, Budget budget) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(ccaName, head, viceHead, budget);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Alternative constructor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * In the event that there is no vice-head in the Cultural CCA."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@viceHead} will be assigned null"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CulturalCca(Tag ccaName, Person head, Budget budget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(ccaName, head, budget);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        builder.append(\"CCA: \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getCcaName())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nHead: \")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getHead())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\tVice-Head: \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getViceHead())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nGiven Budget: \")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getGivenBudget())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nSpent: \")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getSpent())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\tOutstanding: \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getOutstanding())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nTransaction History:\\n\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getTransactionLog());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/SportsCca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Generate a sports CCA."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class SportsCca extends Cca {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Every identity field must be present and not null."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Data field can be null."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public SportsCca(Tag ccaName, Person captain, Person viceCapt, Budget budget) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(ccaName, captain, viceCapt, budget);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Alternative constructor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * In the event that there is no vice-captain in the sports CCA."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@viceHead} will be assigned null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public SportsCca(Tag ccaName, Person captain, Budget budget) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(ccaName, captain, budget);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        builder.append(\"CCA: \")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getCcaName())"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nCaptain: \")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getHead())"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\tVice-Captain: \")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getViceHead())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nGiven Budget: \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getGivenBudget())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nSpent: \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getSpent())"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\tOutstanding: \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getOutstanding())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\"\\nTransaction History:\\n\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getTransactionLog());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/UniqueCcaList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.exceptions.CcaNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.exceptions.DuplicateCcaException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A list of unique CCAs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class UniqueCcaList implements Iterable\u003cCca\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final ObservableList\u003cCca\u003e internalCcaList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean contains(Cca toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.stream().anyMatch(toCheck::isSameCca);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds a CCA to the unique CCA list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA must not already exist in the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void add(Cca toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateCcaException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the CCA {@code target} in the unique CCA list with {@code editedCCA}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the unique CCA list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA identity of {@code editedCCA} must not be the same as another existing CCA in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCca(Cca target, Cca editedCca) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(target, editedCca);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int index \u003d internalCcaList.indexOf(target);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CcaNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!target.isSameCca(editedCca) \u0026\u0026 contains(editedCca)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateCcaException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.set(index, editedCca);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCca(UniqueCcaList replacement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.setAll(replacement.internalCcaList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the contents of this list with {@code CCAs}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code CCAs} must not contain duplicate CCAs."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCcas(List\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(ccas);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!ccasAreUnique(ccas)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateCcaException();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.setAll(ccas);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Removes the equivalent tag from the unique tag list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The tag must exist in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void remove(Cca toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!internalCcaList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CcaNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code CCAs} contains only unique CCAs."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private boolean ccasAreUnique(List\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (int i \u003d 0; i \u003c ccas.size() - 1; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ccas.size(); j++) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                if (ccas.get(i).isSameCca(ccas.get(j))) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cCca\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalCcaList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Iterator\u003cCca\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof UniqueCcaList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 internalCcaList.equals(((UniqueCcaList) other).internalCcaList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/exceptions/CcaNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation is unable to find the specified CCA."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/exceptions/DuplicateCcaException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation will result in duplicate CCAs (CCas are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class DuplicateCcaException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public DuplicateCcaException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(\"Operation would result in duplicate CCAs\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Content.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Represents content in Email."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_CONTENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            \"Subject can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * The first character of the content must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String CONTENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Constructs a {@code Subject}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param content A valid subject."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        value \u003d content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns true if a given string is a valid content."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return test.matches(CONTENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                \u0026\u0026 value.equals(((Content) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 54,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Represents a subject in Email."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            \"Subject can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * The first character of the subject must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String SUBJECT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Constructs a {@code Subject}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param subject A valid subject."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Subject(String subject) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        value \u003d subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static boolean isValidSubject(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return test.matches(SUBJECT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                \u0026\u0026 value.equals(((Subject) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 54,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactContainsRoomPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ContactContainsRoomPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ContactContainsRoomPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Room room \u003d person.getRoom();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (String s : keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (s.toLowerCase().equals(room.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                || (other instanceof ContactContainsRoomPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContactContainsRoomPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactContainsTagPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the keyword given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ContactContainsTagPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ContactContainsTagPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Set\u003cTag\u003e tags \u003d person.getTags();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (String s : keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                if (s.equals(t.toStringOnly())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                || (other instanceof ContactContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContactContainsTagPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FieldsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the keyword given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class FieldsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public FieldsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsFieldIgnoreCase"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                        (person.getFields().toString().replaceAll(\"\\\\[\", \"\").replaceAll(\"]\", \"\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                                keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof FieldsContainsKeywordsPredicate //instanceof handles null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 keywords.equals(((FieldsContainsKeywordsPredicate) other).keywords)); //state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 10,
      "javenseow": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final School school;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Room room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Room room, School school, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, room, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // ToDo: testing"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.phone \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.email \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.room \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.school \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public Room getRoom() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return room;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public School getSchool() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return school;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author javenseow"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns an immutable set containing tags, school and room, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public Set\u003cTag\u003e getFields() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Set\u003cTag\u003e fields \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fields.addAll(tags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fields.add(new Tag(this.school.value));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fields.add(new Tag(this.room.value));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return Collections.unmodifiableSet(fields);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getRoom().equals(getRoom())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, room, tags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Room: \")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getRoom())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" School: \")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getSchool())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "javenseow": 14,
      "ericyjw": 7,
      "-": 128
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Room.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "javenseow"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "javenseow"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "javenseow"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "javenseow"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "javenseow"
        },
        "content": " * Represents a Person\u0027s room number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "javenseow"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_ROOM_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \"Room numbers should only be alphanumeric, and the first character should be an alphabet,\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"followed by 3 digits.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String ROOM_VALIDATION_REGEX \u003d \"\\\\D\\\\d{3}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Constructs a {@code Room}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @param room a valid room number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public Room(String room) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(isValidRoom(room), MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        value \u003d room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns true if a given string is a valid room number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean isValidRoom(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return test.matches(ROOM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof Room // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 value.equals(((Room) other).value));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/School.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s school in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class School {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_SCHOOL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \"School should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String SCHOOL_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Constructs a {@code School}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @param school a valid school"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public School(String school) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(isValidSchool(school), MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        value \u003d school;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns true if a given string is a valid school."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean isValidSchool(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return test.matches(SCHOOL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof School // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 value.equals(((School) other).value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 43,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SchoolContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code School} matches the keyword given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class SchoolContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public SchoolContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getSchool().value, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            || (other instanceof SchoolContainsKeywordPredicate //instanceof handles null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            \u0026\u0026 keywords.equals(((SchoolContainsKeywordPredicate) other).keywords)); //state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 5,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both tags are the same."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Format state as String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public String toStringOnly() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 7,
      "ericyjw": 15,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Tests that a tag matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class TagContainsKeywordPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public TagContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.getTag(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof TagContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 keywords.equals(((TagContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A list of unique CCA tags."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalTagList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalTagList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds a tag to the unique tag list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the tag {@code target} in the unique tag list with {@code editedTag}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the unique tag list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int index \u003d internalTagList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.set(index, editedTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Removes the equivalent tag from the unique tag list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The tag must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!internalTagList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.setAll(replacement.internalTagList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.setAll(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalTagList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalTagList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 internalTagList.equals(((UniqueTagList) other).internalTagList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalTagList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Room(\"A412\"), new School(\"Fos\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"soccer\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Room(\"B124\"), new School(\"SoC\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"basketball\", \"soccer\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Room(\"E216\"), new School(\"Biz\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"choir\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Room(\"A320\"), new School(\"Engine\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"frisbee\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Room(\"C403\"), new School(\"Fass\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"softball\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Room(\"D401\"), new School(\"SDE\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"track\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static Cca[] getSampleCcas() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new Cca[] {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            new Cca("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Tag(\"Basketball\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Person(new Name(\"MrYanDao\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Person(new Name(\"XiaoMing\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Budget(500, 300, 200, new Transaction(\"transaction_log_1\"))),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            new Cca("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Tag(\"Floorball\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Person(new Name(\"XiaoBitch\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Person(new Name(\"RisLow\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Budget(600, 500, 100, new Transaction(\"transaction_log_2\"))),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            new Cca("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Tag(\"Handball\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Person(new Name(\"Steven Lim\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Person(new Name(\"Bumble Bee\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Budget(100, 100, 0, new Transaction(\"transaction_log_2\"))),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static ReadOnlyBudgetBook getSampleBudgetBook() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        BudgetBook sampleBb \u003d new BudgetBook();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (Cca sampleCca : getSampleCcas()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            sampleBb.addCca(sampleCca);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return sampleBb;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 3,
      "ericyjw": 30,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BudgetBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public interface BudgetBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Path getBudgetBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns BudgetBook data as a {@link ReadOnlyBudgetBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @see #getBudgetBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves the given {@link ReadOnlyBudgetBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param budgetBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void saveBudgetBook(ReadOnlyBudgetBook budgetBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @see #saveBudgetBook(ReadOnlyBudgetBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void saveBudgetBook(ReadOnlyBudgetBook budgetBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a storage for Calendar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public interface CalendarStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns the file path of the Calendar directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Path getCalendarPath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Creates the given Calendar to the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendar cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendarName the name of the calendar to be created."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createCalendar(Calendar calendar, String calendarName) throws IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "GilgameshTC": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EmailDirStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.converter.EmailConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * A class to access Email directory in the hard disk"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailDirStorage implements EmailStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Path dirPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public EmailDirStorage(Path dirPath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.dirPath \u003d dirPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Path getEmailPath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return dirPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(EmailModel email) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Path fileName \u003d Paths.get(dirPath.toString(), email.getEmail().getSubject().concat(\".eml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String toSave \u003d EmailConverter.emailToEML(email.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        FileUtil.createIfMissing(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        FileUtil.writeToFile(fileName, toSave);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 26,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EmailStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Represents a storage for Email."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public interface EmailStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns the file path of the Email directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    Path getEmailPath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Saves the given Email to the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param email cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    void saveEmail(EmailModel email) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 19,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IcsCalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.data.CalendarOutputter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * A class to access Calendars stored in the hard disk as a ics file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class IcsCalendarStorage implements CalendarStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Path dirPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public IcsCalendarStorage(Path dirPath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.dirPath \u003d dirPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Calendar calendar, String calendarName) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String fileName \u003d calendarName + \".ics\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Path pathToSave \u003d Paths.get(dirPath.toString(), fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileUtil.createIfMissing(pathToSave);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileOutputStream fout \u003d new FileOutputStream(pathToSave.toFile());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarOutputter outputter \u003d new CalendarOutputter();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        outputter.output(calendar, fout);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Objects.hash(dirPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!(other instanceof IcsCalendarStorage)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath.equals(((IcsCalendarStorage) other).dirPath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "GilgameshTC": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EmailSavedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public interface Storage extends AddressBookStorage, BudgetBookStorage, UserPrefsStorage, CalendarStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    EmailStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getEmailPath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveEmail(EmailModel email) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Saves the current Email in EmailModel to the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    void handleEmailSavedEvent(EmailSavedEvent abce);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Path getCalendarPath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createCalendar(Calendar calendar, String calendarName) throws IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 9,
      "ericyjw": 6,
      "-": 47,
      "GilgameshTC": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EmailSavedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private BudgetBookStorage budgetBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmailStorage emailStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, BudgetBookStorage budgetBookStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                          CalendarStorage calendarStorage, EmailStorage emailStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budgetBookStorage \u003d budgetBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailStorage \u003d emailStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getBudgetBookFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBookStorage.getBudgetBookFilePath();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return readBudgetBook(budgetBookStorage.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBookStorage.readBudgetBook(filePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        saveBudgetBook(budgetBook, budgetBookStorage.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStorage.saveBudgetBook(budgetBook, filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Email methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Path getEmailPath() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return emailStorage.getEmailPath();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(EmailModel email) throws IOException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        emailStorage.saveEmail(email);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void handleEmailSavedEvent(EmailSavedEvent event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            saveEmail(event.data);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.getCalendarPath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Calendar calendar, String calendarName) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(calendar, calendarName);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 24,
      "ericyjw": 32,
      "-": 98,
      "GilgameshTC": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * JAXB-friendly adapted version of the CCA."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlAdaptedCca {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CCA\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String ccaName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String headName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String headPhone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String headEmail;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String headRoom;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String headSchool;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e headTagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String viceHeadName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String viceHeadPhone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String viceHeadEmail;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private String viceHeadRoom;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private String viceHeadSchool;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e viceHeadTagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String givenBudget;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String spent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String outstanding;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String transaction;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Budget budget \u003d new Budget(Integer.parseInt(givenBudget), Integer.parseInt(spent),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Integer.parseInt(outstanding), new Transaction(transaction));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlAdaptedCca() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs a {@code XmlAdaptedCca} with the given {@code ccaName}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlAdaptedCca(String tagName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.ccaName \u003d ccaName;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts a given CCA into this class for JAXB use."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlAdaptedCca(Cca source) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaName \u003d source.getCcaName();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts this jaxb-friendly adapted CCA object into the model\u0027s CCA object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted CCA"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (ccaName \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Tag.isValidTagName(ccaName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Tag modelCcaName \u003d new Tag(ccaName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final List\u003cTag\u003e headTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (XmlAdaptedTag tag : headTagged) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            headTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (headName \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Name.isValidName(headName)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Name modelHeadName \u003d new Name(headName);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (headPhone \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Phone.isValidPhone(headPhone)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Phone modelHeadPhone \u003d new Phone(headPhone);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (headEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Email.isValidEmail(headEmail)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Email modelHeadEmail \u003d new Email(headEmail);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (headRoom \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Room.isValidRoom(headRoom)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final Room modelHeadRoom \u003d new Room(headRoom);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (headSchool \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!School.isValidSchool(headSchool)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(School.MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final School modelHeadSchool \u003d new School(headSchool);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Set\u003cTag\u003e modelHeadTags \u003d new HashSet\u003c\u003e(headTags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Person modelHead \u003d new Person(modelHeadName, modelHeadPhone, modelHeadEmail, modelHeadRoom,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                modelHeadSchool, modelHeadTags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final List\u003cTag\u003e viceHeadTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (XmlAdaptedTag tag : viceHeadTagged) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            viceHeadTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (viceHeadName \u003d\u003d null) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Name.isValidName(viceHeadName)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Name modelViceHeadName \u003d new Name(viceHeadName);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (viceHeadPhone \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Phone.isValidPhone(viceHeadPhone)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Phone modelViceHeadPhone \u003d new Phone(viceHeadPhone);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (viceHeadEmail \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Email.isValidEmail(viceHeadEmail)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Email modelViceHeadEmail \u003d new Email(viceHeadEmail);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (viceHeadRoom \u003d\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Room.isValidRoom(viceHeadRoom)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        final Room modelViceHeadRoom \u003d new Room(viceHeadRoom);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        if (viceHeadSchool \u003d\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!School.isValidSchool(viceHeadSchool)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(School.MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        final School modelViceHeadSchool \u003d new School(viceHeadSchool);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Set\u003cTag\u003e modelViceHeadTags \u003d new HashSet\u003c\u003e(viceHeadTags);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Person modelViceHead \u003d new Person(modelViceHeadName, modelViceHeadPhone, modelViceHeadEmail,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            modelViceHeadRoom, modelViceHeadSchool, modelViceHeadTags);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // TODO: BUDGET"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        //Budget"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (givenBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Budget.class.getSimpleName()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int modelGivenBudget \u003d Integer.parseInt(givenBudget);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int modelSpent \u003d Integer.parseInt(spent);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int modelOutstanding \u003d Integer.parseInt(outstanding);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Transaction modelTransaction \u003d new Transaction(transaction);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Budget modelBudget \u003d new Budget(modelGivenBudget, modelSpent, modelOutstanding, modelTransaction);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new Cca(modelCcaName, modelHead, modelViceHead, modelBudget);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof XmlAdaptedCca)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlAdaptedCca otherPerson \u003d (XmlAdaptedCca) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return Objects.equals(ccaName, otherPerson.ccaName)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(headName, otherPerson.headName)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(headPhone, otherPerson.headPhone)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(headEmail, otherPerson.headEmail)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(headRoom, otherPerson.headRoom)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(headSchool, otherPerson.headSchool)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 headTagged.equals(otherPerson.headTagged)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(viceHeadName, otherPerson.viceHeadName)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(viceHeadPhone, otherPerson.viceHeadPhone)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(viceHeadEmail, otherPerson.viceHeadEmail)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(viceHeadRoom, otherPerson.viceHeadRoom)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 Objects.equals(viceHeadSchool, otherPerson.viceHeadSchool)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 viceHeadTagged.equals(otherPerson.viceHeadTagged)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 budget.equals(((XmlAdaptedCca) other).budget);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 211,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String room;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String school;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String room, String school,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                            List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        room \u003d source.getRoom().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        school \u003d source.getSchool().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (room \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Room.isValidRoom(room)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Room modelRoom \u003d new Room(room);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (school \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!School.isValidSchool(school)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(School.MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final School modelSchool \u003d new School(school);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelRoom, modelSchool, modelTags);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(room, otherPerson.room)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(school, otherPerson.school)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "-": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts a given CCA into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts this jaxb-friendly adapted Tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveAbFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlFileStorage.saveDataToAbFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlBudgetBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A class to access BudgetBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlBudgetBookStorage implements BudgetBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlBudgetBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlBudgetBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getBudgetBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return readBudgetBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Similar to {@link #readBudgetBook()}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.info(\"BudgetBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlSerializableBudgetBook xmlBudgetBook \u003d XmlFileStorage.loadDataFromSaveBbFile(filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.of(xmlBudgetBook.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        saveBudgetBook(budgetBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Similar to {@link #saveBudgetBook(ReadOnlyBudgetBook)}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(budgetBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlFileStorage.saveDataToBbFile(filePath, new XmlSerializableBudgetBook(budgetBook));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static void saveDataToAbFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves the given budgetbook data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static void saveDataToBbFile(Path file, XmlSerializableBudgetBook budgetBook)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            XmlUtil.saveDataToFile(file, budgetBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveAbFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns address book in the file or an empty budget book"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static XmlSerializableBudgetBook loadDataFromSaveBbFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableBudgetBook.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 26,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableBudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * An Immutable BudgetBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "@XmlRootElement(name \u003d \"budgetbook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlSerializableBudgetBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CCA \u003d \"Budget list contains duplicate CCA(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private List\u003cXmlAdaptedCca\u003e ccas;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates an empty XmlSerializableBudgetBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlSerializableBudgetBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlSerializableBudgetBook(ReadOnlyBudgetBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.addAll(src.getCcaList().stream().map(XmlAdaptedCca::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts this budgetbook into the model\u0027s {@code BudgetBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code XmlAdaptedCca}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        BudgetBook budgetBook \u003d new BudgetBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (XmlAdaptedCca c : ccas) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Cca cca \u003d c.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (budgetBook.hasCca(cca)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CCA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetBook.addCca(cca);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof XmlSerializableBudgetBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.equals(((XmlSerializableBudgetBook) other).ccas);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetBrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetBrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"BudgetBrowserPanel.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Cca cca;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label ccaName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label head;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label viceHead;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label budget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label spent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label outstanding;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label transaction;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBrowserPanel(Cca cca) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaName.setText(cca.getCcaName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        head.setText(cca.getHead());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        viceHead.setText(cca.getViceHead());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budget.setText(String.valueOf(cca.getGivenBudget()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        spent.setText(String.valueOf(cca.getSpent()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        outstanding.setText(String.valueOf(cca.getOutstanding()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        transaction.setText(cca.getTransactionLog());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.NewBudgetResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BudgetResultDisplay.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Cca cca;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label ccaName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label head;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label viceHead;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label spent;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label outstanding;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label transaction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetResultDisplay(Cca cca) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaName.setText(cca.getCcaName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        head.setText(cca.getHead());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        viceHead.setText(cca.getViceHead());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budget.setText(String.valueOf(cca.getGivenBudget()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        spent.setText(String.valueOf(cca.getSpent()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        outstanding.setText(String.valueOf(cca.getOutstanding()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        transaction.setText(cca.getTransactionLog());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleNewBudgetResultAvailableEvent(NewBudgetResultAvailableEvent event) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Controller for a budget page"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(BudgetWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"BudgetWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private CcaListPanel ccaListPanel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane ccaListPanelPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates a new BudgetWindow."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param root Stage to use as the root of the BudgetWindow."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetWindow(Stage root) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetWindow(Logic logic, UserPrefs prefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListPanel \u003d new CcaListPanel(logic.getFilteredCcaList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListPanelPlaceholder.getChildren().add(ccaListPanel.getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // BudgetResultDisplay budgetResultDisplay \u003d new BudgetResultDisplay();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // budgetResultDisplayPlaceholder.getChildren().add(budgetResultDisplay.getRoot());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Shows the budget window."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * if this method is called on the primary stage."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003cli\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003c/li\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.fine(\"Showing budget list of the hostel.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the budget window is currently being shown."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Focuses on the budget window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CcaCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * An UI component that displays information of a {@code CCA}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"CcaListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Cca cca;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label ccaName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaCard(Cca cca, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaName.setText(cca.getCcaName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof CcaCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CcaCard card \u003d (CcaCard) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 ccaName.equals(card.ccaName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 Head.equals(card.Head)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 ViceHead.equals(card.ViceHead)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 Budget.equals(card.Budget)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 Spent.equals(card.Budget)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 Outstanding.equals(card.Outstanding)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 Transaction.equals(card.Transaction);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CcaListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.CcaPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"CcaListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CcaListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private ListView\u003cCca\u003e ccaListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaListPanel(ObservableList\u003cCca\u003e ccaList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        setConnections(ccaList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void setConnections(ObservableList\u003cCca\u003e ccaList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListView.setItems(ccaList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListView.setCellFactory(listView -\u003e new CcaListViewCell());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    raise(new CcaPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Scrolls to the {@code CcaCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ccaListView.scrollTo(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ccaListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code CCA} using a {@code CcaCard}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    class CcaListViewCell extends ListCell\u003cCca\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        protected void updateItem(Cca cca, boolean empty) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            super.updateItem(cca, empty);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (empty || cca \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                setGraphic(new CcaCard(cca, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.ShowBudgetViewEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private BudgetWindow budgetWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private MenuItem budgetMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetWindow \u003d new BudgetWindow(logic, prefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Opens the budget window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void handleBudget() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!budgetWindow.isShowing()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetWindow.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetWindow.focus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleShowBudgetEvent(ShowBudgetViewEvent event) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        handleBudget();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 24,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label room;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label school;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        room.setText(person.getRoom().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        school.setText(person.getSchool().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 3,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/BudgetBrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"22.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"56.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "          \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "          \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cLabel fx:id\u003d\"CcaName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cLabel fx:id\u003d\"Head\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Head\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cLabel fx:id\u003d\"ViceHead\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Vice-Head\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cLabel fx:id\u003d\"Budget\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Given Budget\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cLabel fx:id\u003d\"Spent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Spent\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cLabel fx:id\u003d\"Outstanding\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Outstanding\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cLabel fx:id\u003d\"Transaction\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Transaction\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 35
    }
  },
  {
    "path": "src/main/resources/view/BudgetWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         title\u003d\"Budget\" minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cImage url\u003d\"@/images/budget_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                           minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"ccaListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 56
    }
  },
  {
    "path": "src/main/resources/view/CcaListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"22.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"56.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cLabel fx:id\u003d\"CcaName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"Head\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Head\" /\u003e--\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"ViceHead\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Vice-Head\" /\u003e--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"Budget\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Given Budget\" /\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"Spent\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Spent\" /\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"Outstanding\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Outstanding\" /\u003e--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c!--\u003cLabel fx:id\u003d\"Transaction\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$Transaction\" /\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 43
    }
  },
  {
    "path": "src/main/resources/view/CcaListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003cListView fx:id\u003d\"ccaListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" title\u003d\"Hallper\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.lang.Thread.sleep;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 119
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ROOM_FIELD_ID \u003d \"#room\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SCHOOL_FIELD_ID \u003d \"#school\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label roomLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label schoolLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        roomLabel \u003d getChildNode(ROOM_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        schoolLabel \u003d getChildNode(SCHOOL_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRoom() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return roomLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSchool() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return schoolLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 getRoom().equals(person.getRoom().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 getSchool().equals(person.getSchool().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), model.getBudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getBudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public ReadOnlyBudgetBook getBudgetBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public ObservableList\u003cCca\u003e getFilteredCcaList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void clearMultiplePersons(List\u003cPerson\u003e target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void removeTagsFromPersons(List\u003cPerson\u003e target, List\u003cPerson\u003e original) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void updateFilteredCcaList(Predicate\u003cCca\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveEmail(Email email) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void createCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void updateExistingCalendar() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 28,
      "-": 212,
      "GilgameshTC": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model modelEmpty \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModelEmpty \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(\"basketball\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ClearCommand.MESSAGE_CLEAR_NOTHING, \u0027[\u0027 + target.get(0) + \u0027]\u0027);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(new ClearCommand(target), modelEmpty, commandHistory, expectedMessage, expectedModelEmpty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(\"track\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person p \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.clearMultiplePersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ClearCommand.MESSAGE_CLEAR_SPECIFIC_SUCCESS, \u0027[\u0027 + target.get(0) + \u0027]\u0027);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(new ClearCommand(target), model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_clearSpecific_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(\"track\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ClearCommand.MESSAGE_CLEAR_SPECIFIC_SUCCESS, \u0027[\u0027 + target.get(0) + \u0027]\u0027);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person p \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.clearMultiplePersons(persons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(clearCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 60,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_AMY \u003d \"B124\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_BOB \u003d \"A410\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_SCHOOL_AMY \u003d \"SDE\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_SCHOOL_BOB \u003d \"Biz\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_AMY \u003d \"choir\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_BOB \u003d \"soccer\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SCHOOL_DESC_AMY \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SCHOOL_DESC_BOB \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_AMY \u003d \" \" + PREFIX_TAG + VALID_TAG_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_BOB \u003d \" \" + PREFIX_TAG + VALID_TAG_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM; // empty string not allowed for room"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_SCHOOL_DESC \u003d \" \" + PREFIX_SCHOOL"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"School of Computing\"; // spacing no allowed for school"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withRoom(VALID_ROOM_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withSchool(VALID_SCHOOL_AMY).withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withRoom(VALID_ROOM_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withSchool(VALID_SCHOOL_BOB).withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        boolean isErase \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        boolean isClear \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (command instanceof EraseCommand) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            isErase \u003d true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (command instanceof ClearCommand) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            isClear \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (isErase || isClear) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 5,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 5,
      "-": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertFalse(standardCommand.equals(new HelpCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 247
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EraseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.EraseCommand.MESSAGE_NOTHING_ERASED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "class EraseCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void execute_eraseTag_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e original \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Set\u003cTag\u003e editedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e erased \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person originalPerson \u003d expectedModel.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        original.add(originalPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Object[] tags \u003d originalPerson.getTags().toArray();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(tags[0].toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (int i \u003d 1; i \u003c tags.length; i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            editedTags.add((Tag) tags[i]);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person newPerson \u003d new Person(originalPerson.getName(), originalPerson.getPhone(), originalPerson.getEmail(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                originalPerson.getRoom(), originalPerson.getSchool(), editedTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        erased.add(newPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.removeTagsFromPersons(erased, original);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ContactContainsTagPredicate predicate \u003d new ContactContainsTagPredicate(target);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        EraseCommand eraseCommand \u003d new EraseCommand(target, predicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(eraseCommand, model, commandHistory,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                String.format(MESSAGE_NOTHING_ERASED, \u0027[\u0027 + target.get(0) + \u0027]\u0027), expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getBudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate predicate \u003d preparePredicate(\"track soc\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertEquals(Arrays.asList(ALICE, DANIEL, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new FieldsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new FieldsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private FieldsContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new FieldsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 60,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple room - last room accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_AMY, VALID_TAG_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        + SCHOOL_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ROOM_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ROOM_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid room"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_AMY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        + SCHOOL_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 6,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" all\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ROOM_DESC, Room.MESSAGE_ROOM_CONSTRAINTS); // invalid room"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SCHOOL_DESC, School.MESSAGE_SCHOOL_CONSTRAINTS); //invalid school"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_AMY + TAG_DESC_BOB + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_AMY + TAG_EMPTY + TAG_DESC_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_AMY + TAG_DESC_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ROOM_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ROOM_DESC_AMY + NAME_DESC_AMY + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withRoom(VALID_ROOM_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_BOB, VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        //@@author javenseow"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // room"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withRoom(VALID_ROOM_AMY).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        //school"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSchool(VALID_SCHOOL_AMY).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ROOM_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_AMY + PHONE_DESC_AMY + ROOM_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ROOM_DESC_BOB + EMAIL_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withRoom(VALID_ROOM_BOB).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_AMY, VALID_TAG_BOB)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRoom(VALID_ROOM_BOB).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 13,
      "-": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlBudgetBookStorage budgetBookStorage \u003d new XmlBudgetBookStorage(getTempFilePath(\"bdg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        IcsCalendarStorage calendarStorage \u003d new IcsCalendarStorage(getTempFilePath(\"cal\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailDirStorage emailStorage \u003d new EmailDirStorage(getTempFilePath(\"em\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, budgetBookStorage, userPrefsStorage, calendarStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            emailStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            new XmlBudgetBookStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            new IcsCalendarStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            new EmailDirStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "ericyjw": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String INVALID_ROOM \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String INVALID_SCHOOL \u003d \"junior college\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_SCHOOL \u003d BENSON.getSchool().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ROOM, VALID_SCHOOL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidRoom_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d Room.MESSAGE_ROOM_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullRoom_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void toModelType_invalidSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM, INVALID_SCHOOL,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d School.MESSAGE_SCHOOL_CONSTRAINTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void toModelType_nullSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL, invalidTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 31,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CcaBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Cca objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class CcaBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String DEFAULT_CCANAME \u003d \"jcrc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Person DEFAULT_HEAD \u003d CARL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Person DEFAULT_VICEHEAD \u003d DANIEL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final int DEFAULT_BUDGET \u003d 500;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Tag ccaName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Person head;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Person viceHead;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.ccaName \u003d new Tag(DEFAULT_CCANAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.head \u003d new PersonBuilder(DEFAULT_HEAD).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.viceHead \u003d new PersonBuilder(DEFAULT_VICEHEAD).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.budget \u003d new Budget(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the cca name of the {@code Cca} we are building."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withCcaName(String ccaName) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.ccaName \u003d new Tag(ccaName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the head of the {@code Cca} we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withHead(Person head) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.head \u003d new PersonBuilder(head).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the vice head of the {@code Cca} we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withViceHead(Person viceHead) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.viceHead \u003d new PersonBuilder(viceHead).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the {@code Budget} of the {@code Cca} we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withBudget(int budget) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.budget \u003d new Budget(budget);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public Cca build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new Cca(ccaName, head, viceHead, budget);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 55,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        sb.append(PREFIX_ROOM + person.getRoom().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        sb.append(PREFIX_SCHOOL + person.getSchool().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        descriptor.getRoom().ifPresent(room -\u003e sb.append(PREFIX_ROOM).append(room.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        descriptor.getSchool().ifPresent(school -\u003e sb.append(PREFIX_SCHOOL).append(school.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCcas.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Cca} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class TypicalCcas {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Cca TRACK \u003d new CcaBuilder().withCcaName(\"track\").withHead(ALICE).withViceHead(DANIEL)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            .withBudget(500).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Cca BADMINTON \u003d new CcaBuilder().withCcaName(\"badminton\").withHead(BENSON).withViceHead(CARL)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            .withBudget(500).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private TypicalCcas() {} // prevents instantiation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns a {@code BudgetBook} with all the typical ccas."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static BudgetBook getTypicalBudgetBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        BudgetBook bb \u003d new BudgetBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        for (Cca cca : getTypicalCcas()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            bb.addCca(cca);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return bb;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static List\u003cCca\u003e getTypicalCcas() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TRACK, BADMINTON));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 24,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getRoom(), actualCard.getRoom());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getSchool(), actualCard.getSchool());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertEquals(expectedPerson.getRoom().value, actualCard.getRoom());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertEquals(expectedPerson.getSchool().value, actualCard.getSchool());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "-": 74
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + EMAIL_DESC_AMY + \"   \" + ROOM_DESC_AMY + \"   \" + SCHOOL_DESC_AMY + \" \" + TAG_DESC_AMY + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ROOM_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_BOB + EMAIL_DESC_BOB + SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ROOM_DESC_AMY + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing room -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid room -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "ericyjw": 4,
      "-": 244
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD + \" all\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 291
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \"   all\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD + \" all\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD + \" all\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedArgs \u003d command.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_CLEAR_ALL_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 10,
      "-": 92
    }
  }
]
